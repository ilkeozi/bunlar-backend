var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.594,1,2.549]],["body/modules/AppModule.html",[0,2.221,1,4.841,2,1.549,3,1.653,4,1.911,5,1.911,6,1.549,7,1.772,8,1.911,9,2.565,10,2.565,11,3.972,12,0.019,13,3.972,14,3.972,15,3.972,16,2.775,17,1.911,18,1.911,19,0.139,20,0.122,21,0.122,22,2.989,23,3.319,24,0.638,25,2.989,26,4.34,27,5.609,28,0.318,29,2.989,30,0.638,31,0.437,32,0.254,33,0.638,34,2.989,35,0.606,36,1.457,37,0.673,38,4.34,39,0.462,40,2.989,41,2.077,42,2.989,43,2.989,44,2.989,45,2.565,46,1.911,47,3.725,48,2.989,49,1.374,50,1.374,51,2.989,52,2.565,53,2.989,54,2.989,55,2.989,56,2.989,57,2.989,58,2.989,59,2.989,60,2.989,61,0.139,62,0.123,63,1.299,64,2.989,65,2.989,66,0.011,67,0.011]],["title/injectables/AppService.html",[68,0.287,69,2.805]],["body/injectables/AppService.html",[12,0.019,19,0.222,20,0.194,21,0.194,24,1.27,28,0.507,35,0.966,37,0.472,39,0.738,61,0.222,62,0.197,66,0.015,67,0.015,68,0.465,69,4.553,70,1.306,71,4.091,72,0.405,73,6.799,74,4.767,75,1.552,76,1.442,77,4.767,78,4.767]],["title/controllers/AuthController.html",[79,2.029,80,2.549]],["body/controllers/AuthController.html",[12,0.019,19,0.12,20,0.105,21,0.105,24,0.828,28,0.497,30,0.998,31,0.683,32,0.397,33,0.998,35,0.948,37,0.582,39,0.398,61,0.12,62,0.106,66,0.01,67,0.01,72,0.218,76,1.414,79,1.421,80,2.697,81,1.421,82,2.205,83,1.965,84,2.569,85,3.559,86,3.88,87,2.967,88,3.33,89,2.569,90,3.76,91,1.644,92,2.569,93,5.21,94,4.003,95,5.21,96,3.049,97,2.569,98,2.989,99,2.205,100,3.76,101,2.569,102,5.21,103,2.569,104,2.205,105,3.76,106,2.569,107,5.21,108,2.54,109,2.569,110,1.965,111,1.965,112,2.772,113,2.205,114,2.205,115,3.33,116,2.205,117,5.21,118,1.965,119,1.116,120,2.205,121,2.205,122,2.569,123,2.569,124,1.642,125,1.253,126,2.569,127,4.676,128,2.569,129,2.569,130,2.569,131,2.569,132,2.569,133,2.569,134,2.569,135,2.569]],["title/modules/AuthModule.html",[0,1.594,11,2.345]],["body/modules/AuthModule.html",[0,2.327,2,1.684,3,1.797,4,2.077,5,2.077,6,1.684,7,3.175,8,2.077,11,4.593,12,0.019,16,2.946,17,2.077,18,2.077,19,0.151,20,0.132,21,0.132,23,2.484,37,0.665,39,0.503,61,0.151,62,0.134,66,0.012,67,0.012,80,3.721,81,2.549,112,3.789,113,2.788,136,2.788,137,2.788,138,4.086,139,4.086,140,4.086,141,4.086,142,3.248,143,3.248,144,4.608,145,3.248,146,3.248,147,3.248,148,3.248,149,3.248,150,2.258,151,3.248,152,3.248,153,3.248,154,2.484]],["title/injectables/AuthService.html",[68,0.287,112,2.175]],["body/injectables/AuthService.html",[12,0.019,19,0.077,20,0.067,21,0.067,24,0.585,28,0.547,30,0.869,31,0.595,32,0.383,33,0.869,35,0.915,37,0.533,39,0.257,49,0.762,50,0.762,61,0.077,62,0.068,66,0.007,67,0.007,68,0.214,70,0.454,72,0.141,76,1.365,85,3.501,87,2.681,88,2.353,90,3.108,98,2.604,99,2.353,100,3.108,104,2.353,105,3.108,108,2.721,112,1.626,114,1.423,115,2.353,116,1.423,120,1.423,121,1.423,124,1.06,155,1.423,156,0.916,157,2.681,158,3.506,159,4.512,160,2.742,161,4.512,162,1.152,163,1.658,164,3.496,165,2.742,166,2.353,167,1.658,168,2.742,169,1.658,170,1.658,171,1.658,172,2.097,173,1.658,174,4.074,175,3.506,176,3.506,177,3.506,178,3.506,179,1.423,180,1.423,181,1.423,182,1.423,183,2.604,184,1.268,185,1.423,186,2.437,187,1.658,188,1.658,189,3.506,190,1.658,191,1.658,192,1.658,193,1.658,194,3.125,195,2.79,196,3.451,197,2.742,198,2.742,199,2.742,200,1.658,201,5.58,202,3.506,203,3.506,204,1.658,205,4.512,206,3.506,207,2.742,208,2.742,209,3.506,210,2.742,211,2.742,212,1.658,213,1.658,214,1.658,215,1.658,216,1.658,217,1.658,218,1.658,219,1.658,220,1.658,221,1.658,222,1.423,223,1.658,224,1.268]],["title/classes/ConfirmRegistrationDto.html",[62,0.151,90,2.345]],["body/classes/ConfirmRegistrationDto.html",[12,0.019,19,0.173,20,0.151,21,0.151,28,0.537,32,0.429,37,0.5,61,0.173,62,0.208,66,0.013,67,0.013,72,0.315,75,1.608,90,3.227,91,1.775,94,2.993,96,3.197,119,1.61,125,3.247,156,1.688,195,3.533,222,5.538,225,1.121,226,4.929,227,3.179,228,3.704,229,5.049,230,5.049,231,5.049,232,5.049,233,3.704,234,2.833,235,3.861,236,3.861,237,3.704,238,3.672,239,3.861,240,2.196,241,3.227]],["title/modules/CoreModule.html",[0,1.594,13,2.345]],["body/modules/CoreModule.html",[0,2.595,2,2.485,7,2.842,12,0.019,13,3.818,19,0.223,20,0.195,21,0.195,37,0.644,39,0.742,61,0.223,62,0.198,66,0.015,67,0.015,242,4.793,243,5.973,244,3.665,245,4.151,246,4.793,247,4.793,248,4.793]],["title/controllers/CountriesController.html",[79,2.029,249,2.549]],["body/controllers/CountriesController.html",[12,0.019,19,0.108,20,0.094,21,0.094,24,0.765,28,0.568,30,1.054,31,0.721,32,0.419,33,1.054,35,1.082,37,0.653,39,0.359,61,0.108,62,0.096,66,0.009,67,0.009,72,0.197,75,1.629,76,1.615,79,1.282,81,1.282,83,1.772,91,1.878,110,2.742,111,2.742,118,1.772,119,1.007,124,1.481,125,1.13,150,1.61,249,2.492,250,1.988,251,2.317,252,2.126,253,3.431,254,2.492,255,2.492,256,2.492,257,1.988,258,3.348,259,2.317,260,2.317,261,2.317,262,2.317,263,1.61,264,2.317,265,2.317,266,3.924,267,1.61,268,2.317,269,2.317,270,1.61,271,3.889,272,2.317,273,2.317,274,1.988,275,1.988,276,1.988,277,2.317,278,2.317,279,2.6,280,1.988,281,1.61,282,2.742,283,1.61,284,2.317,285,1.988,286,1.61,287,1.61,288,1.61,289,4.582,290,1.988,291,1.61,292,1.988,293,1.61,294,1.988,295,1.61,296,1.988,297,1.61,298,1.988,299,2.317,300,2.317,301,2.317,302,2.317,303,2.317,304,1.988,305,2.317,306,2.317,307,2.317,308,2.317,309,2.317,310,1.988,311,2.317,312,1.988,313,2.317,314,1.988,315,2.317,316,2.317,317,2.317,318,1.988,319,2.317,320,1.988,321,2.317]],["title/modules/CountriesModule.html",[0,1.594,14,2.345]],["body/modules/CountriesModule.html",[0,2.308,2,1.66,3,1.771,4,2.047,5,2.047,6,1.66,7,3.15,8,2.047,12,0.019,14,4.511,16,2.916,17,2.047,18,2.047,19,0.149,20,0.13,21,0.13,23,2.449,31,0.468,37,0.674,39,0.495,45,2.748,46,2.047,61,0.149,62,0.132,66,0.012,67,0.012,81,2.523,249,3.692,279,3.771,280,2.748,286,2.225,287,2.225,322,2.748,323,2.748,324,4.066,325,4.066,326,4.066,327,3.202,328,3.202,329,2.047,330,3.17,331,2.748,332,5.312,333,3.202,334,3.202,335,3.202,336,3.202,337,3.202,338,3.202,339,3.202,340,2.748]],["title/injectables/CountriesService.html",[68,0.287,279,2.175]],["body/injectables/CountriesService.html",[12,0.019,19,0.091,20,0.08,21,0.08,24,0.671,28,0.559,30,1.052,31,0.72,32,0.419,33,1.052,35,0.999,37,0.602,39,0.304,46,1.254,49,0.902,50,0.902,61,0.091,62,0.081,66,0.008,67,0.008,68,0.246,70,0.538,72,0.167,75,1.545,76,1.491,85,3.645,108,2.403,125,0.957,157,2.406,162,2.186,164,3.865,166,3.379,172,4.648,194,2.8,252,1.865,253,3.13,254,2.186,255,2.186,256,2.736,257,2.699,258,2.922,263,2.186,266,3.84,267,2.186,270,1.364,271,3.671,279,1.865,281,1.364,282,2.406,283,1.364,329,1.254,331,1.684,341,1.684,342,1.962,343,4.503,344,1.962,345,3.146,346,1.962,347,1.962,348,1.962,349,1.962,350,1.962,351,1.962,352,1.684,353,1.962,354,2.879,355,2.736,356,1.684,357,2.879,358,1.684,359,2.879,360,1.684,361,1.962,362,3.146,363,3.769,364,1.962,365,1.962,366,1.962,367,1.962,368,3.937,369,1.962,370,2.406,371,1.962,372,3.146,373,3.379,374,1.962,375,1.962,376,1.962,377,1.962,378,3.146,379,1.962,380,1.962,381,1.962,382,1.962,383,3.146,384,1.962,385,1.962,386,1.962,387,1.962]],["title/classes/Country.html",[62,0.151,329,2.345]],["body/classes/Country.html",[12,0.019,19,0.13,20,0.114,21,0.114,28,0.616,31,0.917,32,0.492,37,0.409,46,1.786,61,0.193,62,0.115,66,0.01,67,0.01,72,0.237,75,1.681,91,2.038,96,3.47,119,1.214,156,1.381,194,1.362,225,0.845,238,3.878,241,3.705,329,4.393,330,1.941,340,3.545,388,2.136,389,4.973,390,4.973,391,4.218,392,4.973,393,5.795,394,6.067,395,6.067,396,2.793,397,4.13,398,2.793,399,4.13,400,4.13,401,2.793,402,4.13,403,4.13,404,2.793,405,2.449,406,4.13,407,2.793,408,6.067,409,2.793,410,2.397]],["title/classes/CountryCreatedEvent.html",[62,0.151,354,2.345]],["body/classes/CountryCreatedEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,31,0.972,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,225,1.523,354,3.936,411,4.279,412,4.321,413,5.035]],["title/injectables/CountryCreatedListener.html",[68,0.287,324,2.345]],["body/injectables/CountryCreatedListener.html",[12,0.019,19,0.193,20,0.168,21,0.168,24,1.159,28,0.439,30,0.882,31,0.603,32,0.351,33,0.882,35,0.837,36,2.014,37,0.601,39,0.639,49,1.899,50,1.899,61,0.193,62,0.171,66,0.014,67,0.014,68,0.425,70,1.132,72,0.351,91,1.452,324,3.472,354,4.28,355,2.871,356,3.545,414,3.774,415,3.545,416,5.431,417,5.431,418,5.431,419,4.131,420,3.004,421,2.449,422,2.141,423,2.449,424,2.449]],["title/classes/CountryDeletedEvent.html",[62,0.151,359,2.345]],["body/classes/CountryDeletedEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,31,0.972,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,225,1.523,359,3.936,411,4.279,425,4.321,426,5.035]],["title/injectables/CountryDeletedListener.html",[68,0.287,325,2.345]],["body/injectables/CountryDeletedListener.html",[12,0.019,19,0.193,20,0.168,21,0.168,24,1.159,28,0.439,30,0.882,31,0.603,32,0.351,33,0.882,35,0.837,36,2.014,37,0.601,39,0.639,49,1.899,50,1.899,61,0.193,62,0.171,66,0.014,67,0.014,68,0.425,70,1.132,72,0.351,91,1.452,325,3.472,355,2.871,359,4.28,360,3.545,414,3.774,420,3.004,421,2.449,422,2.141,423,2.449,424,2.449,427,3.545,428,5.431,429,5.431,430,5.431,431,4.131]],["title/classes/CountryUpdatedEvent.html",[62,0.151,357,2.345]],["body/classes/CountryUpdatedEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,31,0.972,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,225,1.523,357,3.936,411,4.279,432,4.321,433,5.035]],["title/injectables/CountryUpdatedListener.html",[68,0.287,326,2.345]],["body/injectables/CountryUpdatedListener.html",[12,0.019,19,0.193,20,0.168,21,0.168,24,1.159,28,0.439,30,0.882,31,0.603,32,0.351,33,0.882,35,0.837,36,2.014,37,0.601,39,0.639,49,1.899,50,1.899,61,0.193,62,0.171,66,0.014,67,0.014,68,0.425,70,1.132,72,0.351,91,1.452,326,3.472,355,2.871,357,4.28,358,3.545,414,3.774,420,3.004,421,2.449,422,2.141,423,2.449,424,2.449,434,3.545,435,5.431,436,5.431,437,5.431,438,4.131]],["title/classes/CreateCountryDto.html",[62,0.151,258,2.175]],["body/classes/CreateCountryDto.html",[12,0.019,19,0.161,20,0.14,21,0.14,28,0.669,31,0.808,32,0.534,37,0.341,61,0.161,62,0.198,66,0.012,67,0.012,72,0.293,75,1.778,91,2.212,125,3.556,156,1.606,225,1.043,240,2.044,258,2.849,389,4.746,390,4.746,391,4.746,392,4.746,405,2.849,439,5.591,440,2.637,441,5.943,442,3.448,443,3.448,444,3.448,445,3.448,446,5.531,447,3.448]],["title/classes/CreateLanguageDto.html",[62,0.151,448,2.175]],["body/classes/CreateLanguageDto.html",[12,0.017,19,0.255,20,0.222,21,0.222,61,0.255,62,0.226,66,0.016,67,0.016,225,1.653,448,3.835,449,4.689,450,4.179]],["title/injectables/ErrorsInterceptor.html",[68,0.287,451,2.805]],["body/injectables/ErrorsInterceptor.html",[12,0.019,19,0.179,20,0.156,21,0.156,24,1.102,28,0.407,30,0.818,31,0.56,32,0.325,33,0.818,35,0.777,37,0.579,39,0.593,61,0.179,62,0.158,63,1.664,66,0.013,67,0.013,68,0.404,70,1.05,72,0.325,76,1.159,108,1.868,422,1.986,451,3.95,452,3.288,453,3.302,454,3.59,455,3.459,456,3.708,457,3.998,458,3.831,459,1.986,460,3.735,461,3.288,462,3.831,463,3.302,464,5.165,465,2.271,466,5.165,467,2.449,468,3.831,469,3.831,470,2.93,471,3.831]],["title/injectables/HttpCacheInterceptor.html",[68,0.287,472,2.805]],["body/injectables/HttpCacheInterceptor.html",[12,0.019,19,0.169,20,0.148,21,0.148,24,1.062,28,0.386,30,0.775,31,0.53,32,0.308,33,0.775,35,0.736,37,0.493,39,0.562,61,0.169,62,0.15,66,0.013,67,0.013,68,0.389,70,0.994,72,0.308,75,1.298,76,1.506,194,2.981,285,4.877,286,2.522,287,2.522,455,3.383,459,1.882,472,3.807,473,4.272,474,3.115,475,3.46,476,4.979,477,4.979,478,3.629,479,5.683,480,2.776,481,3.115,482,3.629,483,3.629,484,5.683,485,3.629,486,3.629,487,3.629,488,3.629,489,3.629,490,3.629]],["title/classes/HttpExceptionFilter.html",[62,0.151,491,2.805]],["body/classes/HttpExceptionFilter.html",[12,0.019,19,0.18,20,0.157,21,0.157,24,1.109,28,0.411,30,0.825,31,0.564,32,0.328,33,0.825,35,0.783,36,1.884,37,0.383,39,0.598,61,0.18,62,0.159,63,2.257,66,0.013,67,0.013,72,0.328,108,1.884,194,3.06,225,1.169,461,5.385,480,2.955,491,3.973,492,4.458,493,3.316,494,5.869,495,5.869,496,5.195,497,5.869,498,6.276,499,3.864,500,3.864,501,3.864,502,3.864,503,3.864,504,2.47,505,3.864,506,3.864,507,5.195,508,3.864,509,3.864,510,3.864,511,3.864,512,3.864,513,3.864]],["title/injectables/JwtStrategy.html",[68,0.287,138,2.345]],["body/injectables/JwtStrategy.html",[12,0.019,19,0.165,20,0.144,21,0.144,24,1.045,28,0.521,30,0.756,31,0.518,32,0.301,33,0.756,35,0.718,37,0.599,39,0.548,61,0.165,62,0.146,66,0.012,67,0.012,68,0.383,70,0.971,72,0.301,76,1.072,85,3.104,98,2.265,138,3.131,150,2.463,154,2.71,162,3.9,195,1.837,224,3.745,475,2.463,514,3.041,515,4.202,516,3.543,517,4.897,518,3.543,519,3.543,520,3.543,521,4.897,522,3.041,523,3.041,524,3.543,525,3.543,526,3.041,527,3.543,528,3.543,529,3.543,530,3.543,531,3.543,532,3.543,533,3.543,534,3.543,535,3.543,536,4.897,537,3.543,538,3.543,539,3.543,540,3.543,541,3.543,542,3.543,543,3.041,544,3.543,545,3.543,546,3.543,547,3.543,548,3.543,549,3.543]],["title/classes/Language.html",[62,0.151,550,2.549]],["body/classes/Language.html",[12,0.018,19,0.256,20,0.224,21,0.224,61,0.256,62,0.227,66,0.016,67,0.016,225,1.663,550,4.512,551,4.718]],["title/controllers/LanguagesController.html",[79,2.029,552,2.549]],["body/controllers/LanguagesController.html",[12,0.019,19,0.112,20,0.098,21,0.098,24,0.789,28,0.578,30,1.076,31,0.736,32,0.428,33,1.076,35,1.102,37,0.639,39,0.373,61,0.112,62,0.1,66,0.009,67,0.009,72,0.205,75,1.648,76,1.645,79,1.333,81,1.333,83,1.843,91,1.912,110,2.827,111,2.827,118,1.843,119,1.047,124,1.541,125,1.175,252,2.192,253,3.504,254,2.569,255,2.569,256,3.125,263,1.675,266,3.987,267,1.675,270,1.675,274,2.069,275,2.069,276,2.069,281,1.675,283,1.675,288,1.675,289,4.666,290,2.069,291,1.675,292,2.069,293,1.675,294,2.069,295,1.675,296,2.069,297,1.675,298,2.069,304,2.069,310,2.069,312,2.069,314,2.069,318,2.069,320,2.069,448,3.401,552,2.569,553,2.069,554,2.069,555,2.069,556,2.41,557,2.41,558,2.41,559,2.41,560,2.41,561,2.41,562,2.41,563,2.41,564,3.939,565,2.41,566,2.41,567,2.666,568,2.069,569,2.827,570,2.41,571,2.41,572,2.41,573,2.41,574,2.41,575,2.41,576,2.41,577,2.41,578,2.41,579,2.41,580,2.41,581,2.41,582,2.41]],["title/modules/LanguagesModule.html",[0,1.594,15,2.345]],["body/modules/LanguagesModule.html",[0,2.684,2,2.223,3,2.372,4,2.742,5,2.742,6,2.223,7,3.663,8,2.742,12,0.019,15,4.439,16,3.558,17,2.742,18,2.742,19,0.2,20,0.175,21,0.175,37,0.612,39,0.664,61,0.2,62,0.177,66,0.014,67,0.014,81,3.079,552,4.294,567,4.117,568,3.68,583,3.68,584,3.68,585,4.289,586,4.289]],["title/injectables/LanguagesService.html",[68,0.287,567,2.175]],["body/injectables/LanguagesService.html",[12,0.019,19,0.137,20,0.119,21,0.119,24,0.913,28,0.628,30,1.186,31,0.812,32,0.472,33,1.186,35,1.292,37,0.5,39,0.453,61,0.137,62,0.121,66,0.011,67,0.011,68,0.335,70,0.803,72,0.249,75,1.541,76,1.788,108,1.428,252,2.536,253,3.862,254,2.973,255,2.973,256,2.973,263,2.973,266,4.289,267,2.973,270,2.973,281,2.036,283,2.036,405,3.95,448,3.504,550,3.862,554,2.514,555,3.671,564,4.074,567,2.536,569,3.272,587,2.514,588,2.93,589,2.93,590,2.93,591,2.93,592,2.93,593,5.91,594,2.93,595,2.93,596,2.93]],["title/injectables/LoggerMiddleware.html",[41,2.549,68,0.287]],["body/injectables/LoggerMiddleware.html",[12,0.019,19,0.201,20,0.175,21,0.175,24,1.191,28,0.458,30,0.92,31,0.629,32,0.366,33,0.92,35,0.874,36,3.019,37,0.427,39,0.667,41,3.88,61,0.201,62,0.178,63,1.872,66,0.014,67,0.014,68,0.437,70,1.181,72,0.366,456,3.884,597,3.698,598,5.583,599,5.583,600,6.193,601,4.309,602,4.309,603,3.698,604,5.583,605,4.309]],["title/injectables/LoggingInterceptor.html",[68,0.287,245,2.549]],["body/injectables/LoggingInterceptor.html",[12,0.019,19,0.183,20,0.16,21,0.16,24,1.122,28,0.418,30,0.839,31,0.574,32,0.334,33,0.839,35,0.797,37,0.586,39,0.608,61,0.183,62,0.162,63,1.708,66,0.013,67,0.013,68,0.411,70,1.077,72,0.334,76,1.189,194,1.917,245,3.653,422,2.038,453,3.36,454,3.653,455,3.496,456,3.747,457,4.04,459,2.038,460,3.785,463,3.36,465,2.331,467,2.513,606,3.374,607,3.932,608,3.932,609,3.932,610,3.932,611,5.256,612,3.932,613,3.932,614,3.932]],["title/classes/LoginResponse.html",[62,0.151,186,2.549]],["body/classes/LoginResponse.html",[12,0.019,19,0.186,20,0.162,21,0.162,28,0.564,32,0.45,37,0.395,61,0.186,62,0.164,66,0.013,67,0.013,72,0.338,75,1.657,91,1.864,94,3.767,96,2.749,119,1.731,156,1.772,186,3.685,225,1.205,238,3.81,241,4.061,615,5.114,616,3.419,617,5.959,618,5.959,619,5.302,620,5.302,621,6.353,622,6.353,623,3.984,624,5.302,625,3.984]],["title/classes/LoginUserDto.html",[62,0.151,100,2.345]],["body/classes/LoginUserDto.html",[12,0.018,19,0.147,20,0.128,21,0.128,28,0.479,32,0.383,37,0.446,61,0.147,62,0.186,66,0.011,67,0.011,72,0.267,75,1.498,91,1.584,94,3.405,96,2.977,100,2.879,119,1.367,125,3.083,156,1.505,195,3.151,196,4.836,225,0.952,234,2.406,235,3.444,236,3.444,238,3.363,239,3.444,240,1.865,241,2.879,405,2.67,470,3.444,626,4.514,627,2.406,628,3.146,629,2.7,630,3.865,631,3.865,632,3.865,633,3.865,634,3.865,635,3.865,636,2.7,637,3.865,638,3.865,639,3.865,640,3.865,641,5.715,642,3.865,643,4.929,644,3.865,645,3.865,646,3.865,647,3.146,648,3.865]],["title/injectables/ParseIntPipe.html",[68,0.287,649,2.805]],["body/injectables/ParseIntPipe.html",[12,0.019,19,0.193,20,0.169,21,0.169,24,1.162,28,0.441,30,0.886,31,0.606,32,0.353,33,0.886,35,0.841,37,0.411,39,0.642,61,0.193,62,0.171,63,1.803,66,0.014,67,0.014,68,0.426,70,1.137,72,0.353,75,1.586,76,1.255,85,3.364,98,2.653,108,2.023,194,2.023,370,3.174,649,4.166,650,4.675,651,3.561,652,4.675,653,4.675,654,4.15,655,3.174,656,3.561,657,4.675,658,5.447,659,4.15,660,4.15,661,4.15,662,3.561,663,3.561]],["title/classes/RegisterUserDto.html",[62,0.151,105,2.345]],["body/classes/RegisterUserDto.html",[12,0.018,19,0.138,20,0.12,21,0.12,28,0.54,31,0.742,32,0.432,37,0.427,61,0.138,62,0.178,66,0.011,67,0.011,72,0.251,75,1.615,91,1.787,94,3.31,96,2.894,105,2.755,119,1.286,125,3.256,156,1.44,195,3.076,196,4.736,225,0.895,234,2.263,235,3.295,236,3.295,238,3.249,239,3.295,240,1.754,241,2.755,405,2.555,441,4.361,470,3.295,627,2.263,629,2.539,630,3.698,631,3.698,632,3.698,633,3.698,634,3.698,635,3.698,636,2.539,637,3.698,638,3.698,639,3.698,640,3.698,641,5.621,642,3.698,643,4.791,644,3.698,645,3.698,646,3.698,648,3.698,664,4.791,665,2.959,666,2.959,667,2.959]],["title/classes/RegistrationConfirmedEvent.html",[62,0.151,668,2.549]],["body/classes/RegistrationConfirmedEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,195,3.448,225,1.523,668,4.279,669,5.284,670,4.321,671,5.035]],["title/injectables/RegistrationConfirmedListener.html",[68,0.287,139,2.345]],["body/injectables/RegistrationConfirmedListener.html",[12,0.019,19,0.191,20,0.167,21,0.167,24,1.152,28,0.435,30,0.873,31,0.598,32,0.348,33,0.873,35,0.83,36,1.996,37,0.598,39,0.633,49,1.882,50,1.882,61,0.191,62,0.169,66,0.014,67,0.014,68,0.422,70,1.121,72,0.348,91,1.439,139,3.451,420,2.986,421,2.427,422,2.122,423,2.427,424,2.427,668,4.639,672,4.632,673,3.513,674,5.398,675,5.398,676,5.398,677,5.398,678,4.093,679,4.093,680,4.093]],["title/interfaces/Response.html",[504,2.345,681,2.345]],["body/interfaces/Response.html",[12,0.019,19,0.193,20,0.168,21,0.168,32,0.351,37,0.601,39,0.639,61,0.253,62,0.171,63,1.795,66,0.014,67,0.014,68,0.425,72,0.351,76,1.25,156,1.815,453,2.641,455,3.004,456,2.449,457,3.472,459,2.141,460,3.472,463,3.472,465,2.449,467,2.641,504,3.472,681,2.641,682,4.131,683,3.159,684,5.745,685,5.207,686,3.545,687,2.871,688,3.545]],["title/guards/RolesGuard.html",[689,2.805,690,2.805]],["body/guards/RolesGuard.html",[12,0.019,19,0.16,20,0.14,21,0.14,24,1.023,28,0.51,30,1.023,31,0.7,32,0.407,33,1.023,35,0.696,37,0.547,39,0.532,61,0.16,62,0.142,63,1.492,66,0.012,67,0.012,68,0.375,72,0.292,76,1.45,94,2.841,124,2.196,125,1.675,162,2.387,194,2.912,224,2.627,244,2.627,373,2.948,455,3.304,459,1.781,480,2.627,481,2.948,690,3.665,691,3.435,692,2.948,693,5.973,694,3.435,695,6.507,696,3.435,697,4.792,698,3.435,699,4.113,700,4.221,701,3.435,702,3.435,703,3.435,704,3.435,705,4.792,706,3.435,707,3.435,708,3.435,709,3.435]],["title/injectables/TimeoutInterceptor.html",[68,0.287,710,2.805]],["body/injectables/TimeoutInterceptor.html",[12,0.019,19,0.193,20,0.168,21,0.168,24,1.159,28,0.439,30,0.882,31,0.603,32,0.351,33,0.882,35,0.837,37,0.601,39,0.639,61,0.193,62,0.171,63,1.795,66,0.014,67,0.014,68,0.425,70,1.132,72,0.351,76,1.25,453,3.472,454,3.774,455,3.565,456,3.597,457,4.12,459,2.141,460,3.878,463,3.472,465,2.449,467,2.641,710,4.153,711,3.545,712,4.131,713,4.131,714,4.131]],["title/injectables/TransformInterceptor.html",[68,0.287,687,2.549]],["body/injectables/TransformInterceptor.html",[12,0.019,19,0.182,20,0.159,21,0.159,24,1.115,28,0.414,30,0.832,31,0.569,32,0.331,33,0.832,35,0.79,37,0.584,39,0.603,61,0.244,62,0.161,63,1.693,66,0.013,67,0.013,68,0.409,70,1.068,72,0.331,76,1.179,453,3.768,454,2.709,455,3.484,456,3.495,457,4.026,459,2.709,460,3.768,463,3.34,465,2.311,467,2.492,504,2.492,681,2.492,683,2.981,684,4.484,685,3.345,686,3.345,687,3.631,688,3.345,715,3.897]],["title/classes/UpdateCountryDto.html",[62,0.151,271,2.345]],["body/classes/UpdateCountryDto.html",[12,0.019,19,0.236,20,0.206,21,0.206,37,0.612,61,0.236,62,0.209,66,0.016,67,0.016,119,2.2,225,1.532,252,3.002,258,3.002,271,3.95,282,3.872,440,3.872,475,3.519,716,4.345,717,4.345,718,5.063]],["title/classes/UpdateLanguageDto.html",[62,0.151,564,2.345]],["body/classes/UpdateLanguageDto.html",[12,0.019,19,0.236,20,0.206,21,0.206,37,0.612,61,0.236,62,0.209,66,0.016,67,0.016,119,2.2,225,1.532,252,3.002,448,3.002,450,3.872,475,3.519,564,3.95,569,3.872,717,4.345,719,4.345,720,5.063]],["title/classes/UserLoginEvent.html",[62,0.151,183,2.345]],["body/classes/UserLoginEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,183,3.936,195,3.448,225,1.523,721,4.709,722,4.321,723,5.035]],["title/injectables/UserLoginListener.html",[68,0.287,140,2.345]],["body/injectables/UserLoginListener.html",[12,0.019,19,0.191,20,0.167,21,0.167,24,1.152,28,0.435,30,0.873,31,0.598,32,0.348,33,0.873,35,0.83,36,1.996,37,0.598,39,0.633,49,1.882,50,1.882,61,0.191,62,0.169,66,0.014,67,0.014,68,0.422,70,1.121,72,0.348,87,4.128,91,1.439,140,3.451,183,4.267,184,3.13,185,3.513,420,2.986,421,2.427,422,2.122,423,2.427,424,2.427,724,4.128,725,3.513,726,5.398,727,5.398,728,4.632,729,4.093]],["title/classes/UserRegisteredEvent.html",[62,0.151,730,2.549]],["body/classes/UserRegisteredEvent.html",[12,0.018,19,0.235,20,0.205,21,0.205,28,0.535,32,0.428,61,0.235,62,0.208,66,0.016,67,0.016,72,0.428,75,1.606,156,2.058,195,3.448,225,1.523,721,4.709,730,4.279,731,4.321,732,5.035]],["title/injectables/UserRegisteredListener.html",[68,0.287,141,2.345]],["body/injectables/UserRegisteredListener.html",[12,0.019,19,0.191,20,0.167,21,0.167,24,1.152,28,0.435,30,0.873,31,0.598,32,0.348,33,0.873,35,0.83,36,1.996,37,0.598,39,0.633,49,1.882,50,1.882,61,0.191,62,0.169,66,0.014,67,0.014,68,0.422,70,1.121,72,0.348,91,1.439,141,3.451,184,3.13,420,2.986,421,2.427,422,2.122,423,2.427,424,2.427,724,4.128,728,4.632,730,4.639,733,3.513,734,5.398,735,5.398,736,5.398,737,4.093,738,4.093]],["title/injectables/ValidationPipe.html",[68,0.287,739,2.805]],["body/injectables/ValidationPipe.html",[12,0.019,19,0.145,20,0.126,21,0.126,24,0.952,28,0.474,30,0.952,31,0.651,32,0.551,33,0.952,35,0.904,37,0.517,39,0.48,61,0.145,62,0.215,63,1.348,66,0.011,67,0.011,68,0.349,70,0.85,72,0.264,75,0.809,76,1.579,85,2.887,98,1.983,108,1.512,157,3.992,194,2.782,240,1.839,363,2.372,370,2.372,405,1.839,515,2.662,652,3.827,653,3.827,655,4.364,656,2.662,657,3.827,662,2.662,663,2.662,699,4.479,739,3.41,740,2.662,741,4.459,742,4.459,743,3.102,744,5.707,745,4.897,746,5.707,747,3.102,748,3.102,749,2.662,750,3.102,751,4.459,752,3.102,753,3.102,754,3.102,755,3.102,756,2.662,757,3.102,758,3.102,759,3.102]],["title/coverage.html",[760,3.835]],["body/coverage.html",[6,0.937,12,0.019,21,0.074,32,0.154,41,1.257,62,0.273,66,0.007,67,0.007,68,0.526,69,1.383,71,1.552,79,2.06,80,1.257,82,1.552,90,1.156,100,1.156,105,1.156,108,0.881,112,1.072,138,1.156,139,1.156,140,1.156,141,1.156,155,1.552,183,1.156,186,1.257,226,1.552,227,1.552,245,1.257,249,1.257,250,1.552,258,1.072,271,1.156,279,1.072,288,1.257,291,1.257,293,1.257,295,1.257,297,1.257,324,1.156,325,1.156,326,1.156,329,1.156,330,1.257,341,1.552,354,1.156,357,1.156,359,1.156,388,2.252,411,2.588,412,1.552,414,2.588,415,1.552,425,1.552,427,1.552,432,1.552,434,1.552,439,1.552,440,2.252,448,1.072,449,1.552,450,2.252,451,1.383,452,1.552,472,1.383,473,1.552,474,1.552,491,1.383,492,1.552,493,1.552,504,1.156,514,1.552,550,1.257,551,1.552,552,1.257,553,1.552,564,1.156,567,1.072,587,1.552,597,1.552,603,4.349,606,1.552,615,1.552,616,1.552,626,1.552,627,2.252,649,1.383,650,1.552,651,1.552,664,1.552,668,1.257,669,1.552,670,1.552,672,1.552,673,1.552,681,1.156,683,2.252,687,1.257,689,1.383,690,1.383,692,1.552,700,1.383,710,1.383,711,1.552,716,1.552,719,1.552,721,2.252,722,1.552,724,2.252,725,1.552,730,1.257,731,1.552,733,1.552,739,1.383,740,1.552,756,6.377,760,1.383,761,1.808,762,1.808,763,1.808,764,6.868,765,2.944,766,1.808,767,5.067,768,4.056,769,1.552,770,6.382,771,1.552,772,1.552,773,1.552,774,1.552,775,1.552,776,4.293,777,4.726,778,1.808,779,2.848,780,1.552,781,1.383,782,1.808,783,1.808]],["title/dependencies.html",[3,2.442,784,2.625]],["body/dependencies.html",[3,1.915,12,0.019,39,0.536,46,2.213,47,2.97,49,1.591,50,1.591,52,2.97,62,0.199,66,0.012,67,0.012,119,1.504,150,2.406,154,2.647,179,2.97,180,4.135,181,4.135,182,2.97,240,2.052,244,2.647,286,2.406,287,2.406,352,2.97,465,2.052,522,2.97,523,2.97,526,2.97,745,2.97,749,2.97,785,3.461,786,3.461,787,5.542,788,3.461,789,3.461,790,3.461,791,3.461,792,3.461,793,3.461,794,5.542,795,3.461,796,3.461,797,3.461,798,3.461,799,3.461,800,3.461,801,3.461,802,4.818,803,3.461,804,3.461,805,3.461,806,3.461,807,3.461,808,3.461,809,3.461,810,3.461,811,3.461,812,3.461,813,3.461,814,3.461,815,3.461,816,3.461,817,3.461,818,3.461,819,3.461,820,3.461,821,3.461,822,3.461,823,3.461,824,3.461,825,3.461,826,3.461,827,3.461]],["title/miscellaneous/functions.html",[828,2.126,829,3.788]],["body/miscellaneous/functions.html",[6,2.997,12,0.018,30,1.383,31,1.042,32,0.551,33,1.383,35,0.76,66,0.013,67,0.013,72,0.319,75,1.86,172,2.868,288,3.539,291,3.539,293,3.539,295,3.539,297,3.539,768,5.562,769,4.369,771,4.369,772,4.369,773,4.369,774,4.369,779,2.868,828,2.607,829,3.219,830,3.219,831,6.482,832,3.751,833,3.751,834,3.751,835,3.751,836,3.751]],["title/index.html",[72,0.26,837,3.059,838,3.059]],["body/index.html",[12,0.019,20,0.149,66,0.013,67,0.013,96,1.897,760,2.798,781,2.798,839,3.659,840,3.659,841,5.006,842,3.659,843,3.659,844,3.659,845,3.659,846,3.659,847,5.707,848,3.659,849,3.659,850,3.659,851,3.659,852,6.793,853,3.659,854,3.659,855,3.659,856,6.635,857,3.659,858,3.659,859,5.006,860,3.659,861,3.659,862,3.659,863,3.659,864,5.006,865,5.006,866,3.659,867,3.659,868,3.659,869,5.006,870,5.006,871,3.659,872,3.659,873,3.659,874,3.659,875,3.659,876,3.14,877,3.659,878,3.659,879,3.659,880,3.659,881,3.659,882,3.659,883,3.659,884,3.659,885,3.659,886,3.659,887,3.14,888,3.659,889,3.659,890,3.659,891,3.659,892,3.659,893,3.659,894,3.14]],["title/modules.html",[2,2.6]],["body/modules.html",[1,3.499,2,2.61,11,3.219,12,0.016,13,3.219,14,3.219,15,3.219,66,0.016,67,0.016,876,5.947,895,6.93,896,6.93,897,7.108,898,5.035,899,5.035]],["title/overview.html",[900,4.304]],["body/overview.html",[0,1.437,1,4.833,2,1.715,3,1.83,4,2.115,5,2.115,6,1.715,7,1.961,8,2.115,9,2.839,10,2.839,11,4.575,12,0.018,13,3.458,14,4.495,15,3.96,16,2.984,17,2.115,18,2.115,66,0.012,67,0.012,70,0.906,81,1.83,112,3.207,136,2.839,137,2.839,138,3.458,139,3.458,140,3.458,141,3.458,225,1.001,279,3.207,322,2.839,323,2.839,324,3.458,325,3.458,326,3.458,543,2.839,567,3.207,583,2.839,584,2.839,681,2.115,689,2.53,900,2.839,901,3.308,902,3.308,903,3.308,904,4.668]],["title/properties.html",[156,1.476,784,2.625]],["body/properties.html",[12,0.019,66,0.016,67,0.016,96,2.799,156,1.805,887,4.633,894,4.633,905,5.399,906,5.399,907,5.399,908,5.399,909,5.399]],["title/miscellaneous/variables.html",[828,2.126,910,3.788]],["body/miscellaneous/variables.html",[6,2.223,12,0.019,32,0.473,66,0.014,67,0.014,72,0.364,76,1.297,85,2.372,330,3.868,363,3.28,388,3.28,410,3.68,420,2.372,459,3.203,655,4.725,700,4.256,775,3.68,779,3.28,780,5.611,781,5,828,2.981,830,4.776,910,3.68,911,4.289,912,4.289,913,6.178,914,6.178,915,4.289,916,4.289]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":756,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.1",{"_index":906,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":904,"title":{},"body":{"overview.html":{}}}],["1.0.7",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":660,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["10.0.0",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["12.0.7",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["12.0.8",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":229,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["16.8.0",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":903,"title":{},"body":{"overview.html":{}}}],["19",{"_index":902,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["2.1442.0",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":901,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["3.34.0",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["3.414.0",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["3166",{"_index":395,"title":{},"body":{"classes/Country.html":{}}}],["380",{"_index":406,"title":{},"body":{"classes/Country.html":{}}}],["4.0.1",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["4.9.1",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":543,"title":{},"body":{"injectables/JwtStrategy.html":{},"overview.html":{}}}],["5.8.0",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["6.3.6",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["7.1.8",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["7.4.4",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":634,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["_audience",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["_id",{"_index":375,"title":{},"body":{"injectables/CountriesService.html":{}}}],["access",{"_index":620,"title":{},"body":{"classes/LoginResponse.html":{}}}],["accesstoken",{"_index":617,"title":{},"body":{"classes/LoginResponse.html":{}}}],["action",{"_index":593,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["address",{"_index":236,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["adds",{"_index":594,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["algorithms",{"_index":537,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["alpha2code",{"_index":389,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["alpha3code",{"_index":390,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["amazing",{"_index":877,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["apibearerauth",{"_index":284,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apibearerauth('jwt",{"_index":307,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apioperation",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":238,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiproperty({description",{"_index":619,"title":{},"body":{"classes/LoginResponse.html":{}}}],["apiproperty({example",{"_index":228,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["apitags",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["apitags('auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('countries",{"_index":301,"title":{},"body":{"controllers/CountriesController.html":{}}}],["apitags('languages",{"_index":571,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["apollo/server",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":854,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":243,"title":{},"body":{"modules/CoreModule.html":{}}}],["applications",{"_index":846,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":69,"title":{"injectables/AppService.html":{}},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["argumentmetadata",{"_index":746,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":498,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":758,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":80,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticationdetails",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":299,"title":{},"body":{"controllers/CountriesController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":887,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":899,"title":{},"body":{"modules.html":{}}}],["await",{"_index":363,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["backers",{"_index":878,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":656,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":662,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["body",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["boolean",{"_index":699,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":897,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":895,"title":{},"body":{"modules.html":{}}}],["building",{"_index":842,"title":{},"body":{"index.html":{}}}],["cache",{"_index":540,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cache.interceptor.ts",{"_index":474,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:6",{"_index":478,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":285,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":336,"title":{},"body":{"modules/CountriesModule.html":{}}}],["cachemodule.register",{"_index":337,"title":{},"body":{"modules/CountriesModule.html":{}}}],["callback",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":457,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":693,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":697,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":495,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":496,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":501,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":466,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["changepassword",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["character",{"_index":646,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["characters",{"_index":640,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["class",{"_index":62,"title":{"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"classes/CountryDeletedEvent.html":{},"classes/CountryUpdatedEvent.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Language.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":225,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"classes/CountryDeletedEvent.html":{},"classes/CountryUpdatedEvent.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Language.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{},"overview.html":{}}}],["clientid",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientmetadata",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_countriesmodule",{"_index":322,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_countriesmodule_providers",{"_index":323,"title":{},"body":{"modules/CountriesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule",{"_index":583,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["cluster_languagesmodule_providers",{"_index":584,"title":{},"body":{"modules/LanguagesModule.html":{},"overview.html":{}}}],["code",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{}}}],["cognito",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cognitouser",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser(userdata",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.authenticateuser(authenticationdetails",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser.confirmregistration(code",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouserattribute",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouserpool",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/decorators/document",{"_index":289,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["common/middleware/logger.middleware",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(@body",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(confirmregistrationdto",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmed",{"_index":677,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["confirmed.event",{"_index":680,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["confirmed.event.ts",{"_index":670,"title":{},"body":{"classes/RegistrationConfirmedEvent.html":{},"coverage.html":{}}}],["confirmed.event.ts:2",{"_index":671,"title":{},"body":{"classes/RegistrationConfirmedEvent.html":{}}}],["confirmed.listener",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["confirmed.listener.ts",{"_index":673,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{},"coverage.html":{}}}],["confirmed.listener.ts:8",{"_index":678,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["confirmregistration",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmregistration(confirmregistrationdto",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmregistrationdto",{"_index":90,"title":{"classes/ConfirmRegistrationDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"coverage.html":{}}}],["confirms",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('before",{"_index":609,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":613,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":605,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(event",{"_index":424,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["const",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{}}}],["constructor",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["constructor(countrymodel",{"_index":342,"title":{},"body":{"injectables/CountriesService.html":{}}}],["constructor(eventemitter",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":694,"title":{},"body":{"guards/RolesGuard.html":{}}}],["consumer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(helmet",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":459,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":703,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":481,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":79,"title":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('countries",{"_index":300,"title":{},"body":{"controllers/CountriesController.html":{}}}],["controller('languages",{"_index":570,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["controllers",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["core/core.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["countries",{"_index":251,"title":{},"body":{"controllers/CountriesController.html":{}}}],["countries.controller",{"_index":328,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countries.service",{"_index":280,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{}}}],["countries/countries.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["countriescontroller",{"_index":249,"title":{"controllers/CountriesController.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"coverage.html":{}}}],["countriesmodule",{"_index":14,"title":{"modules/CountriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{},"modules.html":{},"overview.html":{}}}],["countriesservice",{"_index":279,"title":{"injectables/CountriesService.html":{}},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"coverage.html":{},"overview.html":{}}}],["country",{"_index":329,"title":{"classes/Country.html":{}},"body":{"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"coverage.html":{}}}],["country.dto",{"_index":282,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{}}}],["country.dto.ts",{"_index":440,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["country.dto.ts:11",{"_index":443,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:14",{"_index":447,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:17",{"_index":445,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:5",{"_index":444,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.dto.ts:8",{"_index":442,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["country.name",{"_index":339,"title":{},"body":{"modules/CountriesModule.html":{}}}],["countrycreatedevent",{"_index":354,"title":{"classes/CountryCreatedEvent.html":{}},"body":{"injectables/CountriesService.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"coverage.html":{}}}],["countrycreatedevent.name",{"_index":365,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countrycreatedlistener",{"_index":324,"title":{"injectables/CountryCreatedListener.html":{}},"body":{"modules/CountriesModule.html":{},"injectables/CountryCreatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["countrydeletedevent",{"_index":359,"title":{"classes/CountryDeletedEvent.html":{}},"body":{"injectables/CountriesService.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"coverage.html":{}}}],["countrydeletedevent.name",{"_index":385,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countrydeletedlistener",{"_index":325,"title":{"injectables/CountryDeletedListener.html":{}},"body":{"modules/CountriesModule.html":{},"injectables/CountryDeletedListener.html":{},"coverage.html":{},"overview.html":{}}}],["countrymodel",{"_index":345,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countryschema",{"_index":330,"title":{},"body":{"modules/CountriesModule.html":{},"classes/Country.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["countryupdatedevent",{"_index":357,"title":{"classes/CountryUpdatedEvent.html":{}},"body":{"injectables/CountriesService.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"coverage.html":{}}}],["countryupdatedevent.name",{"_index":380,"title":{},"body":{"injectables/CountriesService.html":{}}}],["countryupdatedlistener",{"_index":326,"title":{"injectables/CountryUpdatedListener.html":{}},"body":{"modules/CountriesModule.html":{},"injectables/CountryUpdatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":760,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":252,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{}}}],["create(@body",{"_index":304,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["create(createcountrydto",{"_index":257,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{}}}],["create(createlanguagedto",{"_index":555,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["create.decorator",{"_index":290,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["create.decorator.ts",{"_index":769,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createcountrydto",{"_index":258,"title":{"classes/CreateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["created.event",{"_index":356,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{}}}],["created.event.ts",{"_index":412,"title":{},"body":{"classes/CountryCreatedEvent.html":{},"coverage.html":{}}}],["created.event.ts:2",{"_index":413,"title":{},"body":{"classes/CountryCreatedEvent.html":{}}}],["created.listener",{"_index":333,"title":{},"body":{"modules/CountriesModule.html":{}}}],["created.listener.ts",{"_index":415,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"coverage.html":{}}}],["created.listener.ts:8",{"_index":419,"title":{},"body":{"injectables/CountryCreatedListener.html":{}}}],["createditem",{"_index":362,"title":{},"body":{"injectables/CountriesService.html":{}}}],["createditem.name",{"_index":366,"title":{},"body":{"injectables/CountriesService.html":{}}}],["createlanguagedto",{"_index":448,"title":{"classes/CreateLanguageDto.html":{}},"body":{"classes/CreateLanguageDto.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["ctx",{"_index":502,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":506,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":505,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":684,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["date().toisostring",{"_index":511,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":611,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["decorators",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"controllers/LanguagesController.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["decorators/roles.decorator",{"_index":701,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}}}],["delete",{"_index":276,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["delete(':id",{"_index":318,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["delete(':id')@documentdelete('country",{"_index":268,"title":{},"body":{"controllers/CountriesController.html":{}}}],["delete(':id')@documentdelete('language",{"_index":562,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["delete.decorator",{"_index":298,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["delete.decorator.ts",{"_index":771,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deleted.event",{"_index":360,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CountryDeletedListener.html":{}}}],["deleted.event.ts",{"_index":425,"title":{},"body":{"classes/CountryDeletedEvent.html":{},"coverage.html":{}}}],["deleted.event.ts:2",{"_index":426,"title":{},"body":{"classes/CountryDeletedEvent.html":{}}}],["deleted.listener",{"_index":335,"title":{},"body":{"modules/CountriesModule.html":{}}}],["deleted.listener.ts",{"_index":427,"title":{},"body":{"injectables/CountryDeletedListener.html":{},"coverage.html":{}}}],["deleted.listener.ts:8",{"_index":431,"title":{},"body":{"injectables/CountryDeletedListener.html":{}}}],["deletedcountry",{"_index":383,"title":{},"body":{"injectables/CountriesService.html":{}}}],["deletedcountry.name",{"_index":386,"title":{},"body":{"injectables/CountriesService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":855,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["documentcreate",{"_index":288,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["documentcreate('country",{"_index":303,"title":{},"body":{"controllers/CountriesController.html":{}}}],["documentcreate('language",{"_index":572,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["documentcreate(name",{"_index":832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentdelete",{"_index":297,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["documentdelete('country",{"_index":319,"title":{},"body":{"controllers/CountriesController.html":{}}}],["documentdelete('language",{"_index":581,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["documentdelete(name",{"_index":833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentfindall",{"_index":295,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["documentfindall('countries",{"_index":308,"title":{},"body":{"controllers/CountriesController.html":{}}}],["documentfindall('languages",{"_index":574,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["documentfindall(name",{"_index":834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentfindone",{"_index":293,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["documentfindone('country",{"_index":311,"title":{},"body":{"controllers/CountriesController.html":{}}}],["documentfindone('language",{"_index":576,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["documentfindone(name",{"_index":835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentupdate",{"_index":291,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["documentupdate('country",{"_index":315,"title":{},"body":{"controllers/CountriesController.html":{}}}],["documentupdate('language",{"_index":578,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["documentupdate(name",{"_index":836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/confirm",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":281,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["dto/login",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":283,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["e2e",{"_index":866,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":843,"title":{},"body":{"index.html":{}}}],["eight",{"_index":639,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["email",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{}}}],["emitter",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"dependencies.html":{}}}],["english",{"_index":400,"title":{},"body":{"classes/Country.html":{}}}],["env.development",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["env.production",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["errors",{"_index":753,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":755,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsinterceptor",{"_index":451,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["event",{"_index":420,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{}}}],["eventemitter2",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{}}}],["eventemittermodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["events/country",{"_index":355,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{}}}],["events/registration",{"_index":679,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["events/user",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["example",{"_index":241,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["exception",{"_index":500,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":493,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:10",{"_index":499,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":508,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":494,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["excluded",{"_index":488,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths",{"_index":486,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":489,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["exec",{"_index":376,"title":{},"body":{"injectables/CountriesService.html":{}}}],["executioncontext",{"_index":455,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["export",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["express",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":475,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{}}}],["extractjwt",{"_index":524,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":622,"title":{},"body":{"classes/LoginResponse.html":{}}}],["failed",{"_index":663,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["findall",{"_index":253,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["findall.decorator",{"_index":296,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["findall.decorator.ts",{"_index":772,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["findone",{"_index":254,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["findone(@param('id",{"_index":312,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["findone(id",{"_index":263,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["findone.decorator",{"_index":294,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["findone.decorator.ts",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["forgotpassword",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":372,"title":{},"body":{"injectables/CountriesService.html":{}}}],["framework",{"_index":841,"title":{},"body":{"index.html":{}}}],["function",{"_index":603,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":829,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":310,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["get(':id')@documentfindone('country",{"_index":264,"title":{},"body":{"controllers/CountriesController.html":{}}}],["get(':id')@documentfindone('language",{"_index":560,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["get()@documentfindall('languages",{"_index":558,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["get()@useguards(undefined)@apibearerauth('jwt')@documentfindall('countries",{"_index":261,"title":{},"body":{"controllers/CountriesController.html":{}}}],["gethello",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":837,"title":{"index.html":{}},"body":{}}],["graph",{"_index":898,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["grow",{"_index":873,"title":{},"body":{"index.html":{}}}],["guard",{"_index":689,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":691,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":422,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["handlecountrycreatedevent",{"_index":416,"title":{},"body":{"injectables/CountryCreatedListener.html":{}}}],["handlecountrycreatedevent(event",{"_index":417,"title":{},"body":{"injectables/CountryCreatedListener.html":{}}}],["handlecountrydeletedevent",{"_index":428,"title":{},"body":{"injectables/CountryDeletedListener.html":{}}}],["handlecountrydeletedevent(event",{"_index":429,"title":{},"body":{"injectables/CountryDeletedListener.html":{}}}],["handlecountryupdatedevent",{"_index":435,"title":{},"body":{"injectables/CountryUpdatedListener.html":{}}}],["handlecountryupdatedevent(event",{"_index":436,"title":{},"body":{"injectables/CountryUpdatedListener.html":{}}}],["handler",{"_index":780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleregistrationconfirmed",{"_index":674,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["handleregistrationconfirmed(event",{"_index":675,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["handleuserlogin",{"_index":726,"title":{},"body":{"injectables/UserLoginListener.html":{}}}],["handleuserlogin(event",{"_index":727,"title":{},"body":{"injectables/UserLoginListener.html":{}}}],["handleuserregistered",{"_index":734,"title":{},"body":{"injectables/UserRegisteredListener.html":{}}}],["handleuserregistered(event",{"_index":735,"title":{},"body":{"injectables/UserRegisteredListener.html":{}}}],["hasrole",{"_index":705,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hello",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["here",{"_index":884,"title":{},"body":{"index.html":{}}}],["host",{"_index":497,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":503,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpadapter",{"_index":482,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":485,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":490,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpcacheinterceptor",{"_index":472,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpexception",{"_index":461,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":469,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpexceptionfilter",{"_index":491,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":891,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":462,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpstatus.bad_gateway",{"_index":471,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["icognitouserdata",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":266,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["identifier",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["iduser",{"_index":547,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ignoreexpiration",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}}}],["injectable",{"_index":68,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["injectmodel",{"_index":353,"title":{},"body":{"injectables/CountriesService.html":{}}}],["injectmodel(country.name",{"_index":361,"title":{},"body":{"injectables/CountriesService.html":{}}}],["installation",{"_index":851,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":853,"title":{},"body":{"index.html":{}}}],["int.pipe.ts",{"_index":651,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:5",{"_index":654,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intercept",{"_index":453,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":454,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptors/logging.interceptor",{"_index":246,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":681,"title":{"interfaces/Response.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":682,"title":{},"body":{"interfaces/Response.html":{}}}],["invalid",{"_index":635,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isemail",{"_index":239,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":234,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isgetrequest",{"_index":484,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isint",{"_index":446,"title":{},"body":{"classes/CreateCountryDto.html":{}}}],["isnan(val",{"_index":661,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["iso",{"_index":394,"title":{},"body":{"classes/Country.html":{}}}],["isstring",{"_index":441,"title":{},"body":{"classes/CreateCountryDto.html":{},"classes/RegisterUserDto.html":{}}}],["issuer",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ita",{"_index":397,"title":{},"body":{"classes/Country.html":{}}}],["italy",{"_index":399,"title":{},"body":{"classes/Country.html":{}}}],["item",{"_index":373,"title":{},"body":{"injectables/CountriesService.html":{},"guards/RolesGuard.html":{}}}],["items",{"_index":368,"title":{},"body":{"injectables/CountriesService.html":{}}}],["i̇lker",{"_index":908,"title":{},"body":{"properties.html":{}}}],["i̇talya",{"_index":402,"title":{},"body":{"classes/Country.html":{}}}],["john.doe@acme.com",{"_index":235,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["join",{"_index":880,"title":{},"body":{"index.html":{}}}],["js",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwks",{"_index":522,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwksrequestsperminute",{"_index":542,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksuri",{"_index":544,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":138,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":888,"title":{},"body":{"index.html":{}}}],["known/jwks.json",{"_index":546,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["lambda",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["language",{"_index":550,"title":{"classes/Language.html":{}},"body":{"classes/Language.html":{},"injectables/LanguagesService.html":{},"coverage.html":{}}}],["language.dto",{"_index":569,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{}}}],["language.dto.ts",{"_index":450,"title":{},"body":{"classes/CreateLanguageDto.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["languages",{"_index":554,"title":{},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["languages.controller",{"_index":586,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["languages.service",{"_index":568,"title":{},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{}}}],["languages/languages.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["languagescontroller",{"_index":552,"title":{"controllers/LanguagesController.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"coverage.html":{}}}],["languagesmodule",{"_index":15,"title":{"modules/LanguagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LanguagesModule.html":{},"modules.html":{},"overview.html":{}}}],["languagesservice",{"_index":567,"title":{"injectables/LanguagesService.html":{}},"body":{"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"coverage.html":{},"overview.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["letter",{"_index":643,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["license",{"_index":894,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":870,"title":{},"body":{"index.html":{}}}],["listeners/country",{"_index":332,"title":{},"body":{"modules/CountriesModule.html":{}}}],["listeners/registration",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["listeners/user",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["local.env",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermiddleware",{"_index":41,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermiddleware).forroutes('none",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["logginginterceptor",{"_index":245,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserLoginListener.html":{}}}],["login(@body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.event",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserLoginListener.html":{}}}],["login.event.ts",{"_index":722,"title":{},"body":{"classes/UserLoginEvent.html":{},"coverage.html":{}}}],["login.event.ts:2",{"_index":723,"title":{},"body":{"classes/UserLoginEvent.html":{}}}],["login.listener",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["login.listener.ts",{"_index":725,"title":{},"body":{"injectables/UserLoginListener.html":{},"coverage.html":{}}}],["login.listener.ts:8",{"_index":729,"title":{},"body":{"injectables/UserLoginListener.html":{}}}],["loginresponse",{"_index":186,"title":{"classes/LoginResponse.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginResponse.html":{},"coverage.html":{}}}],["loginresponse.accesstoken",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresponse.refreshtoken",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":100,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logs",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["lowercase",{"_index":644,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["manager",{"_index":287,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/HttpCacheInterceptor.html":{},"dependencies.html":{}}}],["map",{"_index":686,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matches",{"_index":648,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":629,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["matching",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":470,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["metadata",{"_index":745,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":744,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{}}}],["middlewareconsumer",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["minimum",{"_index":638,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["miscellaneous",{"_index":828,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":869,"title":{},"body":{"index.html":{}}}],["mode",{"_index":859,"title":{},"body":{"index.html":{}}}],["model",{"_index":343,"title":{},"body":{"injectables/CountriesService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":352,"title":{},"body":{"injectables/CountriesService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{}}}],["mongoosemodule.forfeature",{"_index":338,"title":{},"body":{"modules/CountriesModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_uri",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":883,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":889,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["nameturkish",{"_index":391,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["nest",{"_index":847,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":893,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":463,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/apollo",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cache",{"_index":286,"title":{},"body":{"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/HttpCacheInterceptor.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":244,"title":{},"body":{"modules/CoreModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"controllers/CountriesController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"classes/Country.html":{},"controllers/LanguagesController.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":604,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LanguagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["next",{"_index":456,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":688,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(5000",{"_index":714,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["node.js",{"_index":840,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":351,"title":{},"body":{"injectables/CountriesService.html":{}}}],["notfoundexception(`countries",{"_index":371,"title":{},"body":{"injectables/CountriesService.html":{}}}],["notfoundexception(`country",{"_index":377,"title":{},"body":{"injectables/CountriesService.html":{}}}],["now",{"_index":610,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":614,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":852,"title":{},"body":{"index.html":{}}}],["null",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":405,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{},"injectables/LanguagesService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/ValidationPipe.html":{}}}],["numericcode",{"_index":392,"title":{},"body":{"classes/Country.html":{},"classes/CreateCountryDto.html":{}}}],["object",{"_index":751,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["observable",{"_index":460,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["one",{"_index":641,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["onevent",{"_index":421,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["onevent('auth.registration",{"_index":676,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{}}}],["onevent('auth.user",{"_index":728,"title":{},"body":{"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["onevent('country.created",{"_index":418,"title":{},"body":{"injectables/CountryCreatedListener.html":{}}}],["onevent('country.deleted",{"_index":430,"title":{},"body":{"injectables/CountryDeletedListener.html":{}}}],["onevent('country.updated",{"_index":437,"title":{},"body":{"injectables/CountryUpdatedListener.html":{}}}],["onfailure",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["onsuccess",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["open",{"_index":871,"title":{},"body":{"index.html":{}}}],["optional",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["overview",{"_index":900,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":784,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":275,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["param('id",{"_index":579,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["parseint(value",{"_index":659,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":649,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["partialtype",{"_index":717,"title":{},"body":{"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{}}}],["partialtype(createcountrydto",{"_index":718,"title":{},"body":{"classes/UpdateCountryDto.html":{}}}],["partialtype(createlanguagedto",{"_index":720,"title":{},"body":{"classes/UpdateLanguageDto.html":{}}}],["passport",{"_index":526,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":527,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["password'})@apiproperty({example",{"_index":636,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["patch",{"_index":274,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["patch(':id",{"_index":314,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["patch(':id')@documentupdate('country",{"_index":272,"title":{},"body":{"controllers/CountriesController.html":{}}}],["patch(':id')@documentupdate('language",{"_index":565,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["path",{"_index":512,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":549,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":548,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipe",{"_index":468,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["pipe(tap",{"_index":612,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":657,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":748,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":752,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":881,"title":{},"body":{"index.html":{}}}],["pool",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["post",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["post('/confirm",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/confirm')@apioperation({summary",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@apioperation({summary",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register')@apioperation({summary",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@documentcreate('country",{"_index":259,"title":{},"body":{"controllers/CountriesController.html":{}}}],["post()@documentcreate('language",{"_index":556,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["prefix",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["private",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"injectables/ValidationPipe.html":{}}}],["process",{"_index":423,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["process.env.aws_cognito_authority",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["process.env.aws_cognito_client_id",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.aws_cognito_cognito_client_id",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["process.env.aws_cognito_user_pool_id",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":861,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":839,"title":{},"body":{"index.html":{}}}],["project",{"_index":872,"title":{},"body":{"index.html":{}}}],["promise",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CountriesService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":408,"title":{},"body":{"classes/Country.html":{}}}],["prop()@apiproperty({example",{"_index":393,"title":{},"body":{"classes/Country.html":{}}}],["properties",{"_index":156,"title":{"properties.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"classes/CountryDeletedEvent.html":{},"classes/CountryUpdatedEvent.html":{},"classes/CreateCountryDto.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"interfaces/Response.html":{},"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{},"properties.html":{}}}],["provide",{"_index":247,"title":{},"body":{"modules/CoreModule.html":{}}}],["provider",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["ratelimit",{"_index":541,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["read",{"_index":882,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/CreateCountryDto.html":{},"controllers/LanguagesController.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{}}}],["received",{"_index":231,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["reflect",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":695,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reflector.createdecorator",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh",{"_index":624,"title":{},"body":{"classes/LoginResponse.html":{}}}],["refreshtoken",{"_index":618,"title":{},"body":{"classes/LoginResponse.html":{}}}],["register",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registered",{"_index":736,"title":{},"body":{"injectables/UserRegisteredListener.html":{}}}],["registered.event",{"_index":738,"title":{},"body":{"injectables/UserRegisteredListener.html":{}}}],["registered.event.ts",{"_index":731,"title":{},"body":{"classes/UserRegisteredEvent.html":{},"coverage.html":{}}}],["registered.event.ts:2",{"_index":732,"title":{},"body":{"classes/UserRegisteredEvent.html":{}}}],["registered.listener",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["registered.listener.ts",{"_index":733,"title":{},"body":{"injectables/UserRegisteredListener.html":{},"coverage.html":{}}}],["registered.listener.ts:8",{"_index":737,"title":{},"body":{"injectables/UserRegisteredListener.html":{}}}],["registers",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeruserdto",{"_index":105,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["registrationconfirmedevent",{"_index":668,"title":{"classes/RegistrationConfirmedEvent.html":{}},"body":{"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"coverage.html":{}}}],["registrationconfirmedlistener",{"_index":139,"title":{"injectables/RegistrationConfirmedListener.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RegistrationConfirmedListener.html":{},"coverage.html":{},"overview.html":{}}}],["registraton.dto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registraton.dto.ts",{"_index":227,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"coverage.html":{}}}],["registraton.dto.ts:10",{"_index":237,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["registraton.dto.ts:16",{"_index":233,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["reject",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(error",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":255,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["remove(@param('id",{"_index":320,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["remove(id",{"_index":267,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["removes",{"_index":596,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["repository",{"_index":850,"title":{},"body":{"index.html":{}}}],["req",{"_index":602,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":480,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["request.url",{"_index":513,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":704,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":600,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}],["resolve(loginresponse",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(result",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":504,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.schema",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.schema.ts",{"_index":616,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["response.schema.ts:14",{"_index":625,"title":{},"body":{"classes/LoginResponse.html":{}}}],["response.schema.ts:8",{"_index":623,"title":{},"body":{"classes/LoginResponse.html":{}}}],["response.status(statuscode).json",{"_index":509,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["result.getaccesstoken().getjwttoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["result.getrefreshtoken().gettoken",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RegistrationConfirmedListener.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":708,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":700,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.find((item",{"_index":707,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":690,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["routes",{"_index":487,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["rs256",{"_index":538,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":523,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":856,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":465,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":467,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["scalable",{"_index":844,"title":{},"body":{"index.html":{}}}],["schema",{"_index":340,"title":{},"body":{"modules/CountriesModule.html":{},"classes/Country.html":{}}}],["schemafactory",{"_index":409,"title":{},"body":{"classes/Country.html":{}}}],["schemafactory.createforclass(country",{"_index":410,"title":{},"body":{"classes/Country.html":{},"miscellaneous/variables.html":{}}}],["schemas/countries.schema",{"_index":331,"title":{},"body":{"modules/CountriesModule.html":{},"injectables/CountriesService.html":{}}}],["schemas/login",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["sdk",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["sdk/client",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["secretorkeyprovider",{"_index":539,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":781,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["server(event",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serverless",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["side",{"_index":845,"title":{},"body":{"index.html":{}}}],["somecomplexpassword123",{"_index":637,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"modules/CoreModule.html":{},"controllers/CountriesController.html":{},"modules/CountriesModule.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"classes/CreateLanguageDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Language.html":{},"controllers/LanguagesController.html":{},"modules/LanguagesModule.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCountryDto.html":{},"classes/UpdateLanguageDto.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["special",{"_index":645,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["sponsors",{"_index":875,"title":{},"body":{"index.html":{}}}],["src/.../countries.schema.ts",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":830,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:26",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:110",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:114",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:89",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/confirm",{"_index":226,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":626,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":664,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/events/registration",{"_index":669,"title":{},"body":{"classes/RegistrationConfirmedEvent.html":{},"coverage.html":{}}}],["src/auth/events/user",{"_index":721,"title":{},"body":{"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{},"coverage.html":{}}}],["src/auth/listeners/registration",{"_index":672,"title":{},"body":{"injectables/RegistrationConfirmedListener.html":{},"coverage.html":{}}}],["src/auth/listeners/user",{"_index":724,"title":{},"body":{"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{},"coverage.html":{}}}],["src/auth/schemas/login",{"_index":615,"title":{},"body":{"classes/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:24",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/decorators/document",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/http",{"_index":492,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":692,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:6",{"_index":696,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:9",{"_index":698,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":452,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:14",{"_index":458,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["src/common/interceptors/http",{"_index":473,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":711,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:12",{"_index":712,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":597,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":601,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/parse",{"_index":650,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":740,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts:13",{"_index":747,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipe.ts:26",{"_index":743,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/core.module.ts",{"_index":242,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":606,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":607,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":683,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":715,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/countries/countries.controller.ts",{"_index":250,"title":{},"body":{"controllers/CountriesController.html":{},"coverage.html":{}}}],["src/countries/countries.controller.ts:32",{"_index":260,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/countries/countries.controller.ts:40",{"_index":262,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/countries/countries.controller.ts:46",{"_index":265,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/countries/countries.controller.ts:52",{"_index":273,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/countries/countries.controller.ts:58",{"_index":269,"title":{},"body":{"controllers/CountriesController.html":{}}}],["src/countries/countries.module.ts",{"_index":327,"title":{},"body":{"modules/CountriesModule.html":{}}}],["src/countries/countries.service.ts",{"_index":341,"title":{},"body":{"injectables/CountriesService.html":{},"coverage.html":{}}}],["src/countries/countries.service.ts:13",{"_index":344,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/countries.service.ts:19",{"_index":346,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/countries.service.ts:29",{"_index":347,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/countries.service.ts:38",{"_index":348,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/countries.service.ts:47",{"_index":350,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/countries.service.ts:62",{"_index":349,"title":{},"body":{"injectables/CountriesService.html":{}}}],["src/countries/dto/create",{"_index":439,"title":{},"body":{"classes/CreateCountryDto.html":{},"coverage.html":{}}}],["src/countries/dto/update",{"_index":716,"title":{},"body":{"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["src/countries/events/country",{"_index":411,"title":{},"body":{"classes/CountryCreatedEvent.html":{},"classes/CountryDeletedEvent.html":{},"classes/CountryUpdatedEvent.html":{},"coverage.html":{}}}],["src/countries/listeners/country",{"_index":414,"title":{},"body":{"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"coverage.html":{}}}],["src/countries/schemas/countries.schema.ts",{"_index":388,"title":{},"body":{"classes/Country.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/countries/schemas/countries.schema.ts:11",{"_index":401,"title":{},"body":{"classes/Country.html":{}}}],["src/countries/schemas/countries.schema.ts:18",{"_index":396,"title":{},"body":{"classes/Country.html":{}}}],["src/countries/schemas/countries.schema.ts:25",{"_index":398,"title":{},"body":{"classes/Country.html":{}}}],["src/countries/schemas/countries.schema.ts:32",{"_index":407,"title":{},"body":{"classes/Country.html":{}}}],["src/countries/schemas/countries.schema.ts:39",{"_index":404,"title":{},"body":{"classes/Country.html":{}}}],["src/languages/dto/create",{"_index":449,"title":{},"body":{"classes/CreateLanguageDto.html":{},"coverage.html":{}}}],["src/languages/dto/update",{"_index":719,"title":{},"body":{"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["src/languages/entities/language.entity.ts",{"_index":551,"title":{},"body":{"classes/Language.html":{},"coverage.html":{}}}],["src/languages/languages.controller.ts",{"_index":553,"title":{},"body":{"controllers/LanguagesController.html":{},"coverage.html":{}}}],["src/languages/languages.controller.ts:27",{"_index":557,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:33",{"_index":559,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:39",{"_index":561,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:45",{"_index":566,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.controller.ts:54",{"_index":563,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["src/languages/languages.module.ts",{"_index":585,"title":{},"body":{"modules/LanguagesModule.html":{}}}],["src/languages/languages.service.ts",{"_index":587,"title":{},"body":{"injectables/LanguagesService.html":{},"coverage.html":{}}}],["src/languages/languages.service.ts:11",{"_index":589,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:15",{"_index":590,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:19",{"_index":592,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:23",{"_index":591,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/languages/languages.service.ts:7",{"_index":588,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["src/main.ts",{"_index":779,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":857,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":860,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":862,"title":{},"body":{"index.html":{}}}],["started",{"_index":838,"title":{"index.html":{}},"body":{}}],["starter",{"_index":849,"title":{},"body":{"index.html":{}}}],["statements",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":507,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":885,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":525,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"classes/CountryDeletedEvent.html":{},"classes/CountryUpdatedEvent.html":{},"classes/CreateCountryDto.html":{},"injectables/HttpCacheInterceptor.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"classes/UserLoginEvent.html":{},"classes/UserRegisteredEvent.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":528,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":876,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":896,"title":{},"body":{"modules.html":{}}}],["t",{"_index":685,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":608,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":865,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":868,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":867,"title":{},"body":{"index.html":{}}}],["tests",{"_index":864,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":874,"title":{},"body":{"index.html":{}}}],["this.authservice.confirmregistration(confirmregistrationdto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.countriesservice.create(createcountrydto",{"_index":305,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findall",{"_index":309,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.findone(id",{"_index":313,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.remove(id",{"_index":321,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countriesservice.update(id",{"_index":317,"title":{},"body":{"controllers/CountriesController.html":{}}}],["this.countrymodel.create(createcountrydto",{"_index":364,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.find().exec",{"_index":369,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandremove(id).exec",{"_index":384,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findbyidandupdate",{"_index":379,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.countrymodel.findone",{"_index":374,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.eventemitter.emit('auth.user",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventemitter.emit('country.created",{"_index":367,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.eventemitter.emit('country.deleted",{"_index":387,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.eventemitter.emit('country.updated",{"_index":382,"title":{},"body":{"injectables/CountriesService.html":{}}}],["this.httpadapterhost",{"_index":483,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.languagesservice.create(createlanguagedto",{"_index":573,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findall",{"_index":575,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.findone(+id",{"_index":577,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.remove(+id",{"_index":582,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.languagesservice.update(+id",{"_index":580,"title":{},"body":{"controllers/LanguagesController.html":{}}}],["this.reflector.get(roles",{"_index":702,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.tovalidate(metatype",{"_index":750,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userpool",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpool.signup",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":370,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":464,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["timeout",{"_index":713,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":710,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":510,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["token",{"_index":621,"title":{},"body":{"classes/LoginResponse.html":{}}}],["touch",{"_index":886,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":741,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":742,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trackby",{"_index":476,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":477,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transform",{"_index":652,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":653,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":749,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":687,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["turkish",{"_index":403,"title":{},"body":{"classes/Country.html":{}}}],["twitter",{"_index":892,"title":{},"body":{"index.html":{}}}],["type",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmRegistrationDto.html":{},"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/Country.html":{},"classes/CountryCreatedEvent.html":{},"injectables/CountryCreatedListener.html":{},"classes/CountryDeletedEvent.html":{},"injectables/CountryDeletedListener.html":{},"classes/CountryUpdatedEvent.html":{},"injectables/CountryUpdatedListener.html":{},"classes/CreateCountryDto.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RegisterUserDto.html":{},"classes/RegistrationConfirmedEvent.html":{},"injectables/RegistrationConfirmedListener.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":757,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.find((type",{"_index":759,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":848,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":479,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["unit",{"_index":863,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["unlicensed",{"_index":907,"title":{},"body":{"properties.html":{}}}],["update",{"_index":256,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["update(@param('id",{"_index":316,"title":{},"body":{"controllers/CountriesController.html":{}}}],["update(id",{"_index":270,"title":{},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{}}}],["update.decorator",{"_index":292,"title":{},"body":{"controllers/CountriesController.html":{},"controllers/LanguagesController.html":{}}}],["update.decorator.ts",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["updatecountrydto",{"_index":271,"title":{"classes/UpdateCountryDto.html":{}},"body":{"controllers/CountriesController.html":{},"injectables/CountriesService.html":{},"classes/UpdateCountryDto.html":{},"coverage.html":{}}}],["updated.event",{"_index":358,"title":{},"body":{"injectables/CountriesService.html":{},"injectables/CountryUpdatedListener.html":{}}}],["updated.event.ts",{"_index":432,"title":{},"body":{"classes/CountryUpdatedEvent.html":{},"coverage.html":{}}}],["updated.event.ts:2",{"_index":433,"title":{},"body":{"classes/CountryUpdatedEvent.html":{}}}],["updated.listener",{"_index":334,"title":{},"body":{"modules/CountriesModule.html":{}}}],["updated.listener.ts",{"_index":434,"title":{},"body":{"injectables/CountryUpdatedListener.html":{},"coverage.html":{}}}],["updated.listener.ts:8",{"_index":438,"title":{},"body":{"injectables/CountryUpdatedListener.html":{}}}],["updateditem",{"_index":378,"title":{},"body":{"injectables/CountriesService.html":{}}}],["updateditem.name",{"_index":381,"title":{},"body":{"injectables/CountriesService.html":{}}}],["updatelanguagedto",{"_index":564,"title":{"classes/UpdateLanguageDto.html":{}},"body":{"controllers/LanguagesController.html":{},"injectables/LanguagesService.html":{},"classes/UpdateLanguageDto.html":{},"coverage.html":{}}}],["updates",{"_index":595,"title":{},"body":{"injectables/LanguagesService.html":{}}}],["uppercase",{"_index":642,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["use",{"_index":598,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":599,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":248,"title":{},"body":{"modules/CoreModule.html":{}}}],["useguards",{"_index":278,"title":{},"body":{"controllers/CountriesController.html":{}}}],["useguards(authguard('jwt",{"_index":306,"title":{},"body":{"controllers/CountriesController.html":{}}}],["useinterceptors",{"_index":277,"title":{},"body":{"controllers/CountriesController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":302,"title":{},"body":{"controllers/CountriesController.html":{}}}],["user",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/ConfirmRegistrationDto.html":{},"classes/LoginResponse.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{}}}],["user.dto",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.dto.ts",{"_index":627,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":628,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:13",{"_index":665,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:21",{"_index":647,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:24",{"_index":667,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:6",{"_index":666,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.roles",{"_index":709,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":706,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userattributes",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["userloginevent",{"_index":183,"title":{"classes/UserLoginEvent.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserLoginEvent.html":{},"injectables/UserLoginListener.html":{},"coverage.html":{}}}],["userloginevent.email",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["userloginlistener",{"_index":140,"title":{"injectables/UserLoginListener.html":{}},"body":{"modules/AuthModule.html":{},"injectables/UserLoginListener.html":{},"coverage.html":{},"overview.html":{}}}],["username",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpool",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpoolid",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["userregisteredevent",{"_index":730,"title":{"classes/UserRegisteredEvent.html":{}},"body":{"classes/UserRegisteredEvent.html":{},"injectables/UserRegisteredListener.html":{},"coverage.html":{}}}],["userregisteredlistener",{"_index":141,"title":{"injectables/UserRegisteredListener.html":{}},"body":{"modules/AuthModule.html":{},"injectables/UserRegisteredListener.html":{},"coverage.html":{},"overview.html":{}}}],["val",{"_index":658,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validate",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":754,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(payload",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationdata",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":739,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":240,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{},"classes/CreateCountryDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":655,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":910,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vendia/serverless",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["verification",{"_index":230,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["version",{"_index":905,"title":{},"body":{"properties.html":{}}}],["via",{"_index":232,"title":{},"body":{"classes/ConfirmRegistrationDto.html":{}}}],["void",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/CountryCreatedListener.html":{},"injectables/CountryDeletedListener.html":{},"injectables/CountryUpdatedListener.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RegistrationConfirmedListener.html":{},"injectables/UserLoginListener.html":{},"injectables/UserRegisteredListener.html":{}}}],["watch",{"_index":858,"title":{},"body":{"index.html":{}}}],["website",{"_index":890,"title":{},"body":{"index.html":{}}}],["well",{"_index":545,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["world",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":879,"title":{},"body":{"index.html":{}}}],["z\\d",{"_index":633,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["z])(?=.*[a",{"_index":630,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["z])(?=.*\\d",{"_index":631,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["za",{"_index":632,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["zin",{"_index":909,"title":{},"body":{"properties.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CountriesModule.html":{},"modules/LanguagesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            CountriesModule\n                        \n                        \n                            LanguagesModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { CoreModule } from './core/core.module';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CountriesModule } from './countries/countries.module';\nimport { LanguagesModule } from './languages/languages.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport helmet from 'helmet';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    EventEmitterModule.forRoot(),\n    ConfigModule.forRoot({\n      envFilePath: ['.local.env', '.env.development', '.env.production'],\n    }),\n    CoreModule,\n    AuthModule,\n    CountriesModule,\n    LanguagesModule,\n    MongooseModule.forRoot(process.env.MONGO_URI),\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(helmet(), LoggerMiddleware).forRoutes('none');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                confirm\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmRegistrationDto: ConfirmRegistrationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/confirm')@ApiOperation({summary: 'Confirms a user registration.', description: 'Confirms a user registration.'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmRegistrationDto\n                                    \n                                                ConfirmRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@ApiOperation({summary: 'Logs in a user.', description: 'Logs in a user.'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiOperation({summary: 'Registers a new user.', description: 'Registers a new user.'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerUserDto\n                                    \n                                                RegisterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { ConfirmRegistrationDto } from './dto/confirm-registraton.dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/register')\n  @ApiOperation({\n    summary: 'Registers a new user.',\n    description: 'Registers a new user.',\n  })\n  async register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  @Post('/login')\n  @ApiOperation({ summary: 'Logs in a user.', description: 'Logs in a user.' })\n  async login(@Body() loginUserDto: LoginUserDto) {\n    return this.authService.login(loginUserDto);\n  }\n\n  @Post('/confirm')\n  @ApiOperation({\n    summary: 'Confirms a user registration.',\n    description: 'Confirms a user registration.',\n  })\n  async confirm(@Body() confirmRegistrationDto: ConfirmRegistrationDto) {\n    return this.authService.confirmRegistration(confirmRegistrationDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRegistrationConfirmedListener\n\nRegistrationConfirmedListener\n\nAuthModule -->\n\nRegistrationConfirmedListener->AuthModule\n\n\n\n\n\nUserLoginListener\n\nUserLoginListener\n\nAuthModule -->\n\nUserLoginListener->AuthModule\n\n\n\n\n\nUserRegisteredListener\n\nUserRegisteredListener\n\nAuthModule -->\n\nUserRegisteredListener->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RegistrationConfirmedListener\n                        \n                        \n                            UserLoginListener\n                        \n                        \n                            UserRegisteredListener\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserRegisteredListener } from './listeners/user-registered.listener';\nimport { UserLoginListener } from './listeners/user-login.listener';\nimport { RegistrationConfirmedListener } from './listeners/registration-confirmed.listener';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n  providers: [\n    AuthService,\n    UserRegisteredListener,\n    UserLoginListener,\n    RegistrationConfirmedListener,\n    JwtStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userPool\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                confirmRegistration\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmRegistration\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmRegistration(confirmRegistrationDto: ConfirmRegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmRegistrationDto\n                                    \n                                                ConfirmRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDto: LoginUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                LoginUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerUserDto\n                                    \n                                                RegisterUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CognitoUserPool\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserAttribute,\n  CognitoUserPool,\n  ICognitoUserData,\n} from 'amazon-cognito-identity-js';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { LoginUserDto } from './dto/login-user.dto';\nimport { ConfirmRegistrationDto } from './dto/confirm-registraton.dto';\nimport { UserLoginEvent } from './events/user-login.event';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { LoginResponse } from './schemas/login-response.schema';\n\n@Injectable()\nexport class AuthService {\n  private userPool: CognitoUserPool;\n\n  constructor(private eventEmitter: EventEmitter2) {\n    this.userPool = new CognitoUserPool({\n      UserPoolId: process.env.AWS_COGNITO_USER_POOL_ID,\n      ClientId: process.env.AWS_COGNITO_CLIENT_ID,\n    });\n  }\n\n  async register(registerUserDto: RegisterUserDto) {\n    const { email, password } = registerUserDto;\n\n    const userAttributes: CognitoUserAttribute[] = [];\n    const validationData: CognitoUserAttribute[] = [];\n    const clientMetadata = null;\n\n    const result = new Promise((resolve, reject) => {\n      this.userPool.signUp(\n        email,\n        password,\n        userAttributes,\n        validationData,\n        (error, result) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(result);\n          }\n        },\n        clientMetadata,\n      );\n    });\n\n    return result;\n  }\n\n  async login(loginUserDto: LoginUserDto): Promise {\n    const { email, password } = loginUserDto;\n\n    const userData: ICognitoUserData = {\n      Username: email,\n      Pool: this.userPool,\n    };\n\n    const authenticationDetails = new AuthenticationDetails({\n      Username: email,\n      Password: password,\n    });\n\n    const cognitoUser = new CognitoUser(userData);\n\n    const result = new Promise((resolve, reject) => {\n      cognitoUser.authenticateUser(authenticationDetails, {\n        onSuccess: (result) => {\n          const loginResponse = new LoginResponse();\n          loginResponse.accessToken = result.getAccessToken().getJwtToken();\n          loginResponse.refreshToken = result.getRefreshToken().getToken();\n          resolve(loginResponse);\n          const userLoginEvent = new UserLoginEvent();\n          userLoginEvent.email = email;\n          this.eventEmitter.emit('auth.user-login', userLoginEvent);\n        },\n        onFailure: (error) => {\n          reject(error);\n        },\n      });\n    });\n\n    return result;\n  }\n\n  async confirmRegistration(confirmRegistrationDto: ConfirmRegistrationDto) {\n    const { email, code } = confirmRegistrationDto;\n\n    const userData: ICognitoUserData = {\n      Username: email,\n      Pool: this.userPool,\n    };\n\n    const cognitoUser = new CognitoUser(userData);\n\n    const result = new Promise((resolve, reject) => {\n      cognitoUser.confirmRegistration(code, true, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n    return result;\n  }\n  async forgotPassword() {\n    return 'forgotPassword';\n  }\n\n  async changePassword() {\n    return 'changePassword';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmRegistrationDto.html":{"url":"classes/ConfirmRegistrationDto.html","title":"class - ConfirmRegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmRegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/confirm-registraton.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                code\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456', description: 'Verification code received via email.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/confirm-registraton.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'john.doe@acme.com', description: 'Email address of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/confirm-registraton.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class ConfirmRegistrationDto {\n  @IsEmail()\n  @ApiProperty({\n    example: 'john.doe@acme.com',\n    description: 'Email address of the user.',\n  })\n  readonly email: string;\n\n  @ApiProperty({\n    example: '123456',\n    description: 'Verification code received via email.',\n  })\n  readonly code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from './interceptors/logging.interceptor';\n\n@Module({\n  providers: [{ provide: APP_INTERCEPTOR, useClass: LoggingInterceptor }],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CountriesController.html":{"url":"controllers/CountriesController.html","title":"controller - CountriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CountriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/countries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                countries\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@DocumentCreate('country')\n                \n            \n\n            \n                \n                    Defined in src/countries/countries.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCountryDto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth('jwt')@DocumentFindAll('countries')\n                \n            \n\n            \n                \n                    Defined in src/countries/countries.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@DocumentFindOne('country')\n                \n            \n\n            \n                \n                    Defined in src/countries/countries.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@DocumentDelete('country')\n                \n            \n\n            \n                \n                    Defined in src/countries/countries.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@DocumentUpdate('country')\n                \n            \n\n            \n                \n                    Defined in src/countries/countries.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCountryDto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UseGuards,\n} from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { CacheInterceptor } from '@nestjs/cache-manager';\nimport { DocumentCreate } from '../common/decorators/document-create.decorator';\nimport { DocumentUpdate } from '../common/decorators/document-update.decorator';\nimport { DocumentFindOne } from '../common/decorators/document-findone.decorator';\nimport { DocumentFindAll } from '../common/decorators/document-findall.decorator';\nimport { DocumentDelete } from '../common/decorators/document-delete.decorator';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('countries')\n@ApiTags('Countries')\n@UseInterceptors(CacheInterceptor)\nexport class CountriesController {\n  constructor(private readonly countriesService: CountriesService) {}\n\n  @Post()\n  @DocumentCreate('country')\n  create(@Body() createCountryDto: CreateCountryDto) {\n    return this.countriesService.create(createCountryDto);\n  }\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth('jwt')\n  @DocumentFindAll('countries')\n  findAll() {\n    return this.countriesService.findAll();\n  }\n\n  @Get(':id')\n  @DocumentFindOne('country')\n  findOne(@Param('id') id: string) {\n    return this.countriesService.findOne(id);\n  }\n\n  @Patch(':id')\n  @DocumentUpdate('country')\n  update(@Param('id') id: string, @Body() updateCountryDto: UpdateCountryDto) {\n    return this.countriesService.update(id, updateCountryDto);\n  }\n\n  @Delete(':id')\n  @DocumentDelete('country')\n  remove(@Param('id') id: string) {\n    return this.countriesService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CountriesModule.html":{"url":"modules/CountriesModule.html","title":"module - CountriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CountriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\n\nCountriesService\n\nCountriesService\n\n\n\nCountriesModule\n\nCountriesModule\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nCountryCreatedListener\n\nCountryCreatedListener\n\nCountriesModule -->\n\nCountryCreatedListener->CountriesModule\n\n\n\n\n\nCountryDeletedListener\n\nCountryDeletedListener\n\nCountriesModule -->\n\nCountryDeletedListener->CountriesModule\n\n\n\n\n\nCountryUpdatedListener\n\nCountryUpdatedListener\n\nCountriesModule -->\n\nCountryUpdatedListener->CountriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/countries/countries.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CountriesService\n                        \n                        \n                            CountryCreatedListener\n                        \n                        \n                            CountryDeletedListener\n                        \n                        \n                            CountryUpdatedListener\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CountriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CountriesService } from './countries.service';\nimport { CountriesController } from './countries.controller';\nimport { Country, CountrySchema } from './schemas/countries.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CountryCreatedListener } from './listeners/country-created.listener';\nimport { CountryUpdatedListener } from './listeners/country-updated.listener';\nimport { CountryDeletedListener } from './listeners/country-deleted.listener';\nimport { CacheModule } from '@nestjs/cache-manager';\n\n@Module({\n  imports: [\n    CacheModule.register(),\n    MongooseModule.forFeature([{ name: Country.name, schema: CountrySchema }]),\n  ],\n  controllers: [CountriesController],\n  providers: [\n    CountriesService,\n    CountryCreatedListener,\n    CountryUpdatedListener,\n    CountryDeletedListener,\n  ],\n})\nexport class CountriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountriesService.html":{"url":"injectables/CountriesService.html","title":"injectable - CountriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/countries.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(countryModel: Model, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/countries/countries.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        countryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCountryDto: CreateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/countries/countries.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCountryDto\n                                    \n                                                CreateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/countries/countries.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/countries/countries.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/countries/countries.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateCountryDto: UpdateCountryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/countries/countries.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCountryDto\n                                    \n                                                UpdateCountryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateCountryDto } from './dto/create-country.dto';\nimport { UpdateCountryDto } from './dto/update-country.dto';\nimport { Country } from './schemas/countries.schema';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CountryCreatedEvent } from './events/country-created.event';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { CountryUpdatedEvent } from './events/country-updated.event';\nimport { CountryDeletedEvent } from './events/country-deleted.event';\n\n@Injectable()\nexport class CountriesService {\n  constructor(\n    @InjectModel(Country.name) private readonly countryModel: Model,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async create(createCountryDto: CreateCountryDto): Promise {\n    const createdItem = await this.countryModel.create(createCountryDto);\n\n    const countryCreatedEvent = new CountryCreatedEvent();\n    countryCreatedEvent.name = createdItem.name;\n    this.eventEmitter.emit('country.created', countryCreatedEvent);\n\n    return createdItem;\n  }\n\n  async findAll(): Promise {\n    const items = await this.countryModel.find().exec();\n\n    if (!items) {\n      throw new NotFoundException(`Countries not found`);\n    }\n    return items;\n  }\n\n  async findOne(id: string): Promise {\n    const item = await this.countryModel.findOne({ _id: id }).exec();\n\n    if (!item) {\n      throw new NotFoundException(`Country ${id} not found`);\n    }\n    return item;\n  }\n\n  async update(\n    id: string,\n    updateCountryDto: UpdateCountryDto,\n  ): Promise {\n    const updatedItem = await this.countryModel.findByIdAndUpdate(\n      id,\n      updateCountryDto,\n    );\n\n    const countryUpdatedEvent = new CountryUpdatedEvent();\n    countryUpdatedEvent.name = updatedItem.name;\n    this.eventEmitter.emit('country.updated', countryUpdatedEvent);\n    return updatedItem;\n  }\n\n  async remove(id: string): Promise {\n    const deletedCountry = await this.countryModel.findByIdAndRemove(id).exec();\n    const countryDeletedEvent = new CountryDeletedEvent();\n    countryDeletedEvent.name = deletedCountry.name;\n    this.eventEmitter.emit('country.deleted', countryDeletedEvent);\n\n    return deletedCountry;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Country.html":{"url":"classes/Country.html","title":"class - Country","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Country\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/schemas/countries.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                alpha2Code\n                            \n                            \n                                    \n                                    \n                                alpha3Code\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                nameTurkish\n                            \n                            \n                                    \n                                    \n                                numericCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        alpha2Code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty({example: 'IT', description: ' ISO 3166 Alpha2Code of the country.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/schemas/countries.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        alpha3Code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty({example: 'ITA', description: 'ISO 3166 Alpha3Code of the country.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/schemas/countries.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty({example: 'Italy', description: 'Name of the country in english.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/schemas/countries.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nameTurkish\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty({example: 'İtalya', description: 'Name of the country in turkish.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/schemas/countries.schema.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        numericCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@ApiProperty({example: 380, description: 'ISO 3166 NumericCode of the country.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/schemas/countries.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema()\nexport class Country {\n  @Prop()\n  @ApiProperty({\n    example: 'Italy',\n    description: 'Name of the country in english.',\n  })\n  name: string;\n\n  @Prop()\n  @ApiProperty({\n    example: 'IT',\n    description: ' ISO 3166 Alpha2Code of the country.',\n  })\n  alpha2Code: string;\n\n  @Prop()\n  @ApiProperty({\n    example: 'ITA',\n    description: 'ISO 3166 Alpha3Code of the country.',\n  })\n  alpha3Code: string;\n\n  @Prop()\n  @ApiProperty({\n    example: 380,\n    description: 'ISO 3166 NumericCode of the country.',\n  })\n  numericCode: number;\n\n  @Prop()\n  @ApiProperty({\n    example: 'İtalya',\n    description: 'Name of the country in turkish.',\n  })\n  nameTurkish: string;\n}\n\nexport const CountrySchema = SchemaFactory.createForClass(Country);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryCreatedEvent.html":{"url":"classes/CountryCreatedEvent.html","title":"class - CountryCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/events/country-created.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/countries/events/country-created.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CountryCreatedEvent {\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountryCreatedListener.html":{"url":"injectables/CountryCreatedListener.html","title":"injectable - CountryCreatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountryCreatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/listeners/country-created.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCountryCreatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleCountryCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCountryCreatedEvent(event: CountryCreatedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('country.created')\n                \n            \n\n            \n                \n                    Defined in src/countries/listeners/country-created.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                CountryCreatedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { CountryCreatedEvent } from '../events/country-created.event';\n\n@Injectable()\nexport class CountryCreatedListener {\n  @OnEvent('country.created')\n  handleCountryCreatedEvent(event: CountryCreatedEvent) {\n    // handle and process \"CountryCreatedEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryDeletedEvent.html":{"url":"classes/CountryDeletedEvent.html","title":"class - CountryDeletedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryDeletedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/events/country-deleted.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/countries/events/country-deleted.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CountryDeletedEvent {\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountryDeletedListener.html":{"url":"injectables/CountryDeletedListener.html","title":"injectable - CountryDeletedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountryDeletedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/listeners/country-deleted.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCountryDeletedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleCountryDeletedEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCountryDeletedEvent(event: CountryDeletedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('country.deleted')\n                \n            \n\n            \n                \n                    Defined in src/countries/listeners/country-deleted.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                CountryDeletedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { CountryDeletedEvent } from '../events/country-deleted.event';\n\n@Injectable()\nexport class CountryDeletedListener {\n  @OnEvent('country.deleted')\n  handleCountryDeletedEvent(event: CountryDeletedEvent) {\n    // handle and process \"CountryDeletedEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CountryUpdatedEvent.html":{"url":"classes/CountryUpdatedEvent.html","title":"class - CountryUpdatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CountryUpdatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/events/country-updated.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/countries/events/country-updated.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CountryUpdatedEvent {\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CountryUpdatedListener.html":{"url":"injectables/CountryUpdatedListener.html","title":"injectable - CountryUpdatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CountryUpdatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/listeners/country-updated.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCountryUpdatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleCountryUpdatedEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCountryUpdatedEvent(event: CountryUpdatedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('country.updated')\n                \n            \n\n            \n                \n                    Defined in src/countries/listeners/country-updated.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                CountryUpdatedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { CountryUpdatedEvent } from '../events/country-updated.event';\n\n@Injectable()\nexport class CountryUpdatedListener {\n  @OnEvent('country.updated')\n  handleCountryUpdatedEvent(event: CountryUpdatedEvent) {\n    // handle and process \"CountryUpdatedEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCountryDto.html":{"url":"classes/CreateCountryDto.html","title":"class - CreateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/dto/create-country.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                alpha2Code\n                            \n                            \n                                    \n                                    Readonly\n                                alpha3Code\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    Readonly\n                                nameTurkish\n                            \n                            \n                                    \n                                    Readonly\n                                numericCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        alpha2Code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/dto/create-country.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        alpha3Code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/dto/create-country.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/dto/create-country.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        nameTurkish\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/dto/create-country.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        numericCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/countries/dto/create-country.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class CreateCountryDto {\n  @IsString()\n  readonly name: string;\n\n  @IsString()\n  readonly alpha2Code: string;\n\n  @IsString()\n  readonly alpha3Code: string;\n\n  @IsInt()\n  readonly numericCode: number;\n\n  @IsString()\n  readonly nameTurkish: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLanguageDto.html":{"url":"classes/CreateLanguageDto.html","title":"class - CreateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/dto/create-language.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateLanguageDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/exception.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(() =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/http-cache.interceptor.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor } from '@nestjs/cache-manager';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const { httpAdapter } = this.httpAdapterHost;\n\n    const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n    const excludePaths = [\n      // Routes to be excluded\n    ];\n    if (\n      !isGetRequest ||\n      (isGetRequest &&\n        excludePaths.includes(httpAdapter.getRequestUrl(request)))\n    ) {\n      return undefined;\n    }\n    return httpAdapter.getRequestUrl(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const statusCode = exception.getStatus();\n\n    response.status(statusCode).json({\n      statusCode,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      _audience: process.env.AWS_COGNITO_COGNITO_CLIENT_ID,\n      issuer: process.env.AWS_COGNITO_AUTHORITY,\n      algorithms: ['RS256'],\n      secretOrKeyProvider: passportJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: process.env.AWS_COGNITO_AUTHORITY + '/.well-known/jwks.json',\n      }),\n    });\n  }\n\n  async validate(payload: any) {\n    return { idUser: payload.sub, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Language.html":{"url":"classes/Language.html","title":"class - Language","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Language\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/entities/language.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Language {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LanguagesController.html":{"url":"controllers/LanguagesController.html","title":"controller - LanguagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LanguagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/languages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                languages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createLanguageDto: CreateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@DocumentCreate('language')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createLanguageDto\n                                    \n                                                CreateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@DocumentFindAll('languages')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@DocumentFindOne('language')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@DocumentDelete('language')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@DocumentUpdate('language')\n                \n            \n\n            \n                \n                    Defined in src/languages/languages.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateLanguageDto\n                                    \n                                                UpdateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { DocumentCreate } from '../common/decorators/document-create.decorator';\nimport { DocumentFindAll } from '../common/decorators/document-findall.decorator';\nimport { DocumentFindOne } from '../common/decorators/document-findone.decorator';\nimport { DocumentUpdate } from '../common/decorators/document-update.decorator';\nimport { DocumentDelete } from '../common/decorators/document-delete.decorator';\n\n@Controller('languages')\n@ApiTags('Languages')\nexport class LanguagesController {\n  constructor(private readonly languagesService: LanguagesService) {}\n\n  @Post()\n  @DocumentCreate('language')\n  create(@Body() createLanguageDto: CreateLanguageDto) {\n    return this.languagesService.create(createLanguageDto);\n  }\n\n  @Get()\n  @DocumentFindAll('languages')\n  findAll() {\n    return this.languagesService.findAll();\n  }\n\n  @Get(':id')\n  @DocumentFindOne('language')\n  findOne(@Param('id') id: string) {\n    return this.languagesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  @DocumentUpdate('language')\n  update(\n    @Param('id') id: string,\n    @Body() updateLanguageDto: UpdateLanguageDto,\n  ) {\n    return this.languagesService.update(+id, updateLanguageDto);\n  }\n\n  @Delete(':id')\n  @DocumentDelete('language')\n  remove(@Param('id') id: string) {\n    return this.languagesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LanguagesModule.html":{"url":"modules/LanguagesModule.html","title":"module - LanguagesModule","body":"\n                   \n\n\n\n\n    Modules\n    LanguagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\n\nLanguagesService\n\nLanguagesService\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/languages/languages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LanguagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LanguagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LanguagesService } from './languages.service';\nimport { LanguagesController } from './languages.controller';\n\n@Module({\n  controllers: [LanguagesController],\n  providers: [LanguagesService],\n})\nexport class LanguagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguagesService.html":{"url":"injectables/LanguagesService.html","title":"injectable - LanguagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LanguagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/languages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createLanguageDto: CreateLanguageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createLanguageDto\n                                    \n                                                CreateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateLanguageDto: UpdateLanguageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/languages/languages.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateLanguageDto\n                                    \n                                                UpdateLanguageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateLanguageDto } from './dto/create-language.dto';\nimport { UpdateLanguageDto } from './dto/update-language.dto';\n\n@Injectable()\nexport class LanguagesService {\n  create(createLanguageDto: CreateLanguageDto) {\n    return 'This action adds a new language';\n  }\n\n  findAll() {\n    return `This action returns all languages`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} language`;\n  }\n\n  update(id: number, updateLanguageDto: UpdateLanguageDto) {\n    return `This action updates a #${id} language`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} language`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logger.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponse.html":{"url":"classes/LoginResponse.html","title":"class - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/login-response.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Access token of the user.', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/login-response.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token of the user.', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/login-response.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginResponse {\n  @ApiProperty({\n    description: 'Access token of the user.',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'Refresh token of the user.',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  })\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'john.doe@acme.com', description: 'Email address of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$&+,:;=?@#|'<>.^*()%!-])[A-Za-z\\d@$&+,:;=?@#|'<>.^*()%!-]{8,}$/, {message: 'invalid password'})@ApiProperty({example: 'SomeComplexPassword123!', description: 'Password of the user. Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, Matches } from 'class-validator';\n\nexport class LoginUserDto {\n  @IsEmail()\n  @ApiProperty({\n    example: 'john.doe@acme.com',\n    description: 'Email address of the user.',\n  })\n  readonly email: string;\n\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$&+,:;=?@#|'<>.^*()%!-])[A-Za-z\\d@$&+,:;=?@#|'<>.^*()%!-]{8,}$/,\n    { message: 'invalid password' },\n  )\n  @ApiProperty({\n    example: 'SomeComplexPassword123!',\n    description:\n      'Password of the user. Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character.',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/parse-int.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, PipeTransform, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'john.doe@acme.com', description: 'Email address of the user.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$&+,:;=?@#|'<>.^*()%!-])[A-Za-z\\d@$&+,:;=?@#|'<>.^*()%!-]{8,}$/, {message: 'invalid password'})@ApiProperty({example: 'SomeComplexPassword123!', description: 'Password of the user. Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, Matches } from 'class-validator';\n\nexport class RegisterUserDto {\n  @IsString()\n  readonly name: string;\n\n  @IsEmail()\n  @ApiProperty({\n    example: 'john.doe@acme.com',\n    description: 'Email address of the user.',\n  })\n  readonly email: string;\n\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$&+,:;=?@#|'<>.^*()%!-])[A-Za-z\\d@$&+,:;=?@#|'<>.^*()%!-]{8,}$/,\n    { message: 'invalid password' },\n  )\n  @ApiProperty({\n    example: 'SomeComplexPassword123!',\n    description:\n      'Password of the user. Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character.',\n  })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationConfirmedEvent.html":{"url":"classes/RegistrationConfirmedEvent.html","title":"class - RegistrationConfirmedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationConfirmedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/events/registration-confirmed.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/events/registration-confirmed.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegistrationConfirmedEvent {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrationConfirmedListener.html":{"url":"injectables/RegistrationConfirmedListener.html","title":"injectable - RegistrationConfirmedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrationConfirmedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/listeners/registration-confirmed.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleRegistrationConfirmed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleRegistrationConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegistrationConfirmed(event: RegistrationConfirmedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('auth.registration-confirmed')\n                \n            \n\n            \n                \n                    Defined in src/auth/listeners/registration-confirmed.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                RegistrationConfirmedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { RegistrationConfirmedEvent } from '../events/registration-confirmed.event';\n\n@Injectable()\nexport class RegistrationConfirmedListener {\n  @OnEvent('auth.registration-confirmed')\n  handleRegistrationConfirmed(event: RegistrationConfirmedEvent) {\n    // handle and process \"RegistrationConfirmedEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Roles } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get(Roles, context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      user.roles.some((role) => !!roles.find((item) => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(5000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCountryDto.html":{"url":"classes/UpdateCountryDto.html","title":"class - UpdateCountryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCountryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/countries/dto/update-country.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCountryDto } from './create-country.dto';\n\nexport class UpdateCountryDto extends PartialType(CreateCountryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateLanguageDto.html":{"url":"classes/UpdateLanguageDto.html","title":"class - UpdateLanguageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateLanguageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/languages/dto/update-language.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateLanguageDto } from './create-language.dto';\n\nexport class UpdateLanguageDto extends PartialType(CreateLanguageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginEvent.html":{"url":"classes/UserLoginEvent.html","title":"class - UserLoginEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/events/user-login.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/events/user-login.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserLoginEvent {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserLoginListener.html":{"url":"injectables/UserLoginListener.html","title":"injectable - UserLoginListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserLoginListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/listeners/user-login.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUserLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleUserLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUserLogin(event: UserLoginEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('auth.user-login')\n                \n            \n\n            \n                \n                    Defined in src/auth/listeners/user-login.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UserLoginEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { UserLoginEvent } from '../events/user-login.event';\n\n@Injectable()\nexport class UserLoginListener {\n  @OnEvent('auth.user-login')\n  handleUserLogin(event: UserLoginEvent) {\n    // handle and process \"UserLoginEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegisteredEvent.html":{"url":"classes/UserRegisteredEvent.html","title":"class - UserRegisteredEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegisteredEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/events/user-registered.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/events/user-registered.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserRegisteredEvent {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRegisteredListener.html":{"url":"injectables/UserRegisteredListener.html","title":"injectable - UserRegisteredListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRegisteredListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/listeners/user-registered.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUserRegistered\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleUserRegistered\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUserRegistered(event: UserRegisteredEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('auth.user-registered')\n                \n            \n\n            \n                \n                    Defined in src/auth/listeners/user-registered.listener.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UserRegisteredEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { UserRegisteredEvent } from '../events/user-registered.event';\n\n@Injectable()\nexport class UserRegisteredListener {\n  @OnEvent('auth.user-registered')\n  handleUserRegistered(event: UserRegisteredEvent) {\n    // handle and process \"UserRegisteredEvent\" event\n    console.log(event);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                            Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/confirm-registraton.dto.ts\n            \n            class\n            ConfirmRegistrationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/events/registration-confirmed.event.ts\n            \n            class\n            RegistrationConfirmedEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/events/user-login.event.ts\n            \n            class\n            UserLoginEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/events/user-registered.event.ts\n            \n            class\n            UserRegisteredEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/listeners/registration-confirmed.listener.ts\n            \n            injectable\n            RegistrationConfirmedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/listeners/user-login.listener.ts\n            \n            injectable\n            UserLoginListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/listeners/user-registered.listener.ts\n            \n            injectable\n            UserRegisteredListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/schemas/login-response.schema.ts\n            \n            class\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/document-create.decorator.ts\n            \n            function\n            DocumentCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/document-delete.decorator.ts\n            \n            function\n            DocumentDelete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/document-findall.decorator.ts\n            \n            function\n            DocumentFindAll\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/document-findone.decorator.ts\n            \n            function\n            DocumentFindOne\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/document-update.decorator.ts\n            \n            function\n            DocumentUpdate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/countries.controller.ts\n            \n            controller\n            CountriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/countries/countries.service.ts\n            \n            injectable\n            CountriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/countries/dto/create-country.dto.ts\n            \n            class\n            CreateCountryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/countries/dto/update-country.dto.ts\n            \n            class\n            UpdateCountryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/countries/events/country-created.event.ts\n            \n            class\n            CountryCreatedEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/events/country-deleted.event.ts\n            \n            class\n            CountryDeletedEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/events/country-updated.event.ts\n            \n            class\n            CountryUpdatedEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/listeners/country-created.listener.ts\n            \n            injectable\n            CountryCreatedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/listeners/country-deleted.listener.ts\n            \n            injectable\n            CountryDeletedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/listeners/country-updated.listener.ts\n            \n            injectable\n            CountryUpdatedListener\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/countries/schemas/countries.schema.ts\n            \n            class\n            Country\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/countries/schemas/countries.schema.ts\n            \n            variable\n            CountrySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/dto/create-language.dto.ts\n            \n            class\n            CreateLanguageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/dto/update-language.dto.ts\n            \n            class\n            UpdateLanguageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/entities/language.entity.ts\n            \n            class\n            Language\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/languages/languages.controller.ts\n            \n            controller\n            LanguagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/languages/languages.service.ts\n            \n            injectable\n            LanguagesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            handler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.9.1\n        \n            @aws-sdk/client-cognito-identity-provider : ^3.414.0\n        \n            @nestjs/apollo : ^12.0.7\n        \n            @nestjs/cache-manager : ^2.1.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/event-emitter : ^2.0.2\n        \n            @nestjs/graphql : ^12.0.8\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.8\n        \n            @vendia/serverless-express : ^4.10.4\n        \n            amazon-cognito-identity-js : ^6.3.6\n        \n            aws-lambda : ^1.0.7\n        \n            aws-sdk : ^2.1442.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cors : ^2.8.5\n        \n            graphql : ^16.8.0\n        \n            helmet : ^7.0.0\n        \n            jwks-rsa : ^3.0.1\n        \n            mongodb : ^5.8.0\n        \n            mongoose : ^7.4.4\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            serverless : ^3.34.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            DocumentCreate   (src/.../document-create.decorator.ts)\n                        \n                        \n                            DocumentDelete   (src/.../document-delete.decorator.ts)\n                        \n                        \n                            DocumentFindAll   (src/.../document-findall.decorator.ts)\n                        \n                        \n                            DocumentFindOne   (src/.../document-findone.decorator.ts)\n                        \n                        \n                            DocumentUpdate   (src/.../document-update.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    src/common/decorators/document-create.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DocumentCreate\n                        \n                    \n                \n            \n            \n                \nDocumentCreate(name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/document-delete.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DocumentDelete\n                        \n                    \n                \n            \n            \n                \nDocumentDelete(name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/document-findall.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DocumentFindAll\n                        \n                    \n                \n            \n            \n                \nDocumentFindAll(name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/document-findone.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DocumentFindOne\n                        \n                    \n                \n            \n            \n                \nDocumentFindOne(name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/decorators/document-update.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DocumentUpdate\n                        \n                    \n                \n            \n            \n                \nDocumentUpdate(name: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CountriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LanguagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CountriesModule\n\n\n\ncluster_CountriesModule_providers\n\n\n\ncluster_LanguagesModule\n\n\n\ncluster_LanguagesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nCountriesModule\n\nCountriesModule\n\nAppModule -->\n\nCountriesModule->AppModule\n\n\n\n\n\nLanguagesModule\n\nLanguagesModule\n\nAppModule -->\n\nLanguagesModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRegistrationConfirmedListener\n\nRegistrationConfirmedListener\n\nAuthModule -->\n\nRegistrationConfirmedListener->AuthModule\n\n\n\n\n\nUserLoginListener\n\nUserLoginListener\n\nAuthModule -->\n\nUserLoginListener->AuthModule\n\n\n\n\n\nUserRegisteredListener\n\nUserRegisteredListener\n\nAuthModule -->\n\nUserRegisteredListener->AuthModule\n\n\n\n\n\nCountriesService\n\nCountriesService\n\nCountriesModule -->\n\nCountriesService->CountriesModule\n\n\n\n\n\nCountryCreatedListener\n\nCountryCreatedListener\n\nCountriesModule -->\n\nCountryCreatedListener->CountriesModule\n\n\n\n\n\nCountryDeletedListener\n\nCountryDeletedListener\n\nCountriesModule -->\n\nCountryDeletedListener->CountriesModule\n\n\n\n\n\nCountryUpdatedListener\n\nCountryUpdatedListener\n\nCountriesModule -->\n\nCountryUpdatedListener->CountriesModule\n\n\n\n\n\nLanguagesService\n\nLanguagesService\n\nLanguagesModule -->\n\nLanguagesService->LanguagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : İlker Özin\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CountrySchema   (src/.../countries.schema.ts)\n                        \n                        \n                            handler   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            server   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/countries/schemas/countries.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CountrySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Country)\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handler\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Handler\n\n                    \n                \n                \n                    \n                        Default value : async (\n  event: any,\n  context: Context,\n  callback: Callback,\n) => {\n  server = server ?? (await bootstrap());\n  return server(event, context, callback);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Handler\n\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Reflector.createDecorator()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
